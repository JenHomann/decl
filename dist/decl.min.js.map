{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/decl.ts","src/element_collector.ts","src/scope.ts","src/subscriptions.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","scope_1","default","Decl","root","this","scope","Scope","buildRootScope","select","matcher","executor","getDefaultInstance","when","on","defaultInstance","document","documentElement","setDefaultInstance","decl","pristine","prototype","getScope","window","isArrayLike","value","toArray","arrayLike","Array","slice","TypeError","isMemberOfArrayLike","haystack","needle","indexOf","ElementCollector","isMatchingElement","rootElement","elementMatcher","getInstance","collectMatchingElements","instance","element","ELEMENT_MATCHER_TYPE_ERROR_MESSAGE","cssSelector","isMatchingElementFromCssSelector","object","isMatchingElementFromObject","elementVistor","isMatchingElementFromElementVistor","collectMatchingElementsFromCssSelector","collectMatchingElementsFromObject","collectMatchingElementsFromElementVistor","matches","querySelectorAll","Element","visitorResult","isMatch","elements","_i","_a","children","child","element_1","push","apply","subscriptions_1","isActivated","subscriptions","activate","getElement","match","addSubscription","TrivialSubscription","connected","unmatch","disconnected","MatchingElementsSubscription","buildSelectExecutor","ElementMatchesSubscription","buildWhenExecutor","EventSubscription","subscription","disconnect","splice","connect","deactivate","removeSubscription","index","scopes","event","addedElements","_b","_c","removedElements","element_2","length_1","_this","isMatching","arraySubtract","minuend","subtrahend","difference","minuend_1","member","element_collector_1","Subscription","_super","config","__extends","isConnected","eventMatcher","eventNames","parseEventMatcher","eventListener","handleEvent","eventName","addEventListener","removeEventListener","split","BatchedMutationSubscription","isListening","handleMutationTimeout","mutationCallback","deferHandleMutations","mutationObserver","MutationObserver","startListening","observe","mutationObserverInit","stopListening","handleMutationsNow","setTimeout","takeRecords","handleMutations","clearTimeout","childList","attributes","characterData","subtree","DeclEvent","name","MatchingElementsChangedEvent","matchingElementsSubscription","matchingElements","updateMatchingElements","previouslyMatchingElements","event_1","ElementMatchsChangedEvent","elementMatchesSubscription","updateIsMatchingElement","computeIsMatchingElement","wasMatchingElement","event_2"],"mappings":"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","file":"decl.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { Scope, ScopeExecutor } from './scope';\nimport { ElementMatcher } from './element_collector';\nimport { EventMatcher, SubscriptionExecutor } from './subscriptions';\n\nexport default Decl;\n\nexport class Decl {\n    private static defaultInstance: Decl;\n\n    static select(matcher: ElementMatcher, executor: ScopeExecutor): Scope {\n        return this.getDefaultInstance().select(matcher, executor);\n    }\n\n    static when(matcher: ElementMatcher, executor: ScopeExecutor): Scope {\n        return this.getDefaultInstance().when(matcher, executor);\n    }\n\n    static on(matcher: EventMatcher, executor: SubscriptionExecutor): Scope {\n        return this.getDefaultInstance().on(matcher, executor);\n    }\n\n    static getDefaultInstance() : Decl {\n        return this.defaultInstance || (this.defaultInstance = new Decl(document.documentElement));\n    }\n\n    static setDefaultInstance(decl: Decl) : Decl {\n        return this.defaultInstance = decl;\n    }\n\n    static pristine(): void {\n        if(this.defaultInstance) {\n            this.defaultInstance.pristine();\n            this.defaultInstance = null;\n        }\n    }\n\n    private scope: Scope;\n\n    constructor(root: Element) {\n        this.scope = Scope.buildRootScope(root);\n    }\n\n    getScope(): Scope {\n        return this.scope;\n    }\n    \n    select(matcher: ElementMatcher, executor: ScopeExecutor): Scope {\n        return this.scope.select(matcher, executor);\n    }\n\n    when(matcher: ElementMatcher, executor: ScopeExecutor): Scope {\n        return this.scope.when(matcher, executor);\n    }\n\n    on(matcher: EventMatcher, executor: SubscriptionExecutor): Scope {\n        return this.scope.on(matcher, executor);\n    }\n\n    pristine(): void {\n        this.scope.pristine();\n    }\n}\n\n// Export to a global for the browser (there *has* to be a better way to do this!)\nif(typeof(window) !== 'undefined') {\n    (<any>window).Decl = Decl;\n}\n","export default ElementCollector;\n\nexport interface ElementVistor { (element: Element): ElementMatcher | boolean }\nexport declare type ElementMatcher = string | NodeListOf<Element> | Element[] | ElementVistor;\n\nexport class ElementCollector {\n    private static instance: ElementCollector;\n    \n    private static readonly ELEMENT_MATCHER_TYPE_ERROR_MESSAGE = \"Decl: An `ElementMatcher` must be a CSS selector (string) or a function which takes a node under consideration and returns a CSS selector (string) that matches all matching nodes in the subtree, an array-like object of matching nodes in the subtree, or a boolean value as to whether the node should be included (in this case, the function will be invoked again for all children of the node).\";\n\n    static isMatchingElement(rootElement: Element, elementMatcher: ElementMatcher): boolean {\n        return this.getInstance().isMatchingElement(rootElement, elementMatcher);\n    }\n\n    static collectMatchingElements(rootElement: Element, elementMatcher: ElementMatcher): Element[] {\n        return this.getInstance().collectMatchingElements(rootElement, elementMatcher);\n    }\n\n    private static getInstance() : ElementCollector {\n        return this.instance || (this.instance = new ElementCollector());\n    }\n\n    isMatchingElement(element: Element, elementMatcher: ElementMatcher): boolean {\n        switch(typeof(elementMatcher)) {\n            default:\n                throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n                \n            case 'string':\n                let cssSelector: string = <string>elementMatcher;\n                return this.isMatchingElementFromCssSelector(element, cssSelector);\n            \n            case 'object':\n                let object = <Object>elementMatcher;\n                return this.isMatchingElementFromObject(element, object);\n                \n            case 'function':\n                let elementVistor = <ElementVistor>elementMatcher;\n                return this.isMatchingElementFromElementVistor(element, elementVistor);       \n        }\n    }\n\n    collectMatchingElements(element: Element, elementMatcher: ElementMatcher): Element[] {\n        switch(typeof(elementMatcher)) {\n            default:\n                throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n                \n            case 'string':\n                let cssSelector: string = <string>elementMatcher;\n                return this.collectMatchingElementsFromCssSelector(element, cssSelector);\n\n            case 'object':\n                let object = <Object>elementMatcher;\n                return this.collectMatchingElementsFromObject(element, object);\n                \n            case 'function':\n                let elementVistor = <ElementVistor>elementMatcher;\n                return this.collectMatchingElementsFromElementVistor(element, elementVistor);       \n        }\n    }\n\n    private isMatchingElementFromCssSelector(element: Element, cssSelector: string): boolean {\n        if(typeof(element.matches) === 'function') { // take a shortcut in modern browsers\n            return element.matches(cssSelector);\n        }else{\n            return isMemberOfArrayLike(document.querySelectorAll(cssSelector), element);\n        }\n    }\n\n    private isMatchingElementFromObject(element: Element, object: Object): boolean {\n        if(object === null) {\n            return false;\n        }else{\n            if(isArrayLike(object)) {\n                let arrayLike = <ArrayLike<any>>object;\n\n                if(arrayLike.length === 0 || arrayLike[0] instanceof Element) {\n                    return isMemberOfArrayLike(arrayLike, element);                \n                }else{\n                    throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n                }\n            }else{\n                throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n            }\n        }\n    }\n\n    private isMatchingElementFromElementVistor(element: Element, elementVistor: ElementVistor): boolean {\n        let visitorResult = elementVistor(element);\n\n        if(typeof(visitorResult) === 'boolean') {\n            let isMatch = <boolean>visitorResult;\n            return isMatch;\n        }else{\n            let elementMatcher = <ElementMatcher>visitorResult;\n            return this.isMatchingElement(element, elementMatcher);\n        }\n    }\n\n    private collectMatchingElementsFromCssSelector(element: Element, cssSelector: string): Element[] {\n        return toArray<Element>(element.querySelectorAll(cssSelector));\n    }\n\n    private collectMatchingElementsFromObject(element: Element, object: Object): Element[] {\n        if(object === null) {\n            return [];\n        }else{\n            if(isArrayLike(object)) {\n                let arrayLike = <ArrayLike<any>>object;\n\n                if(arrayLike.length === 0 || arrayLike[0] instanceof Element) {\n                    return toArray<Element>(arrayLike);                \n                }else{\n                    throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n                }\n            }else{\n                throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n            }\n        }\n    }\n\n    private collectMatchingElementsFromElementVistor(element: Element, elementVistor: ElementVistor): Element[] {\n        let elements: Element[] = [];\n\n        // I'm fibbing to the compiler here. `element.children` is a `NodeListOf<Element>`,\n        // which does not have a compatable interface with `Array<Element>`; however, the\n        // generated code still works because it doesn't actually use very much of the \n        // `Array` interace (it really only assumes a numberic length property and keys for\n        // 0...length). Casting to `any` here destroys that type information, so the \n        // compiler can't tell there is an issue and allows it without an error.\n        for(let child of <any>element.children) {\n            if(child instanceof Element) {\n                let element: Element = child;\n                let visitorResult = elementVistor(element);\n\n                if(typeof(visitorResult) === 'boolean') {\n                    let isMatch = <boolean>visitorResult;\n\n                    if(isMatch) {\n                        elements.push(element);\n                    }\n                }else{\n                    elements.push(...this.collectMatchingElements(element, visitorResult));\n                }\n            }\n        }\n\n        return elements;\n    }\n}\n\nfunction isArrayLike(value: any) {\n    return typeof(value) === 'object' && typeof(value.length) === 'number';\n}\n\nfunction toArray<T>(arrayLike: ArrayLike<T>): Array<T> {\n    if(isArrayLike(arrayLike)) {\n        return Array.prototype.slice.call(arrayLike, 0);\n    }else{\n        throw new TypeError('Expected ArrayLike');\n    }\n}\n\nfunction isMemberOfArrayLike(haystack: ArrayLike<any>,  needle: any) {\n    return Array.prototype.indexOf.call(haystack, needle) !== -1;\n}\n","export default Scope;\n\nimport { ElementMatcher } from './element_collector';\nimport { SubscriptionExecutor, Subscription, TrivialSubscription, EventMatcher, EventSubscription, MatchingElementsChangedEvent, MatchingElementsSubscription, ElementMatchesSubscription, ElementMatchsChangedEvent } from './subscriptions';\n\nexport interface ScopeExecutor { (scope: Scope): void };\n\nexport class Scope {\n    static buildRootScope(element: Element): Scope {\n        let scope = new Scope(element);\n\n        scope.activate();\n\n        return scope;\n    }\n\n    private readonly element: Element;\n    private isActivated: boolean = false;\n    private subscriptions: Subscription[] = [];\n    private children: Scope[] = [];\n\n    constructor(element: Element, executor?: ScopeExecutor) {\n        this.element = element;\n\n        if(executor) {\n            executor.call(this, this);\n        }\n    }\n\n    getElement(): Element {\n        return this.element;\n    }\n\n    match(executor: SubscriptionExecutor): Scope {\n        this.addSubscription(new TrivialSubscription(this.element, { connected: true }, executor));\n\n        return this;\n    }\n\n    unmatch(executor: SubscriptionExecutor): Scope {\n        this.addSubscription(new TrivialSubscription(this.element, { disconnected: true }, executor));\n\n        return this;\n    }\n\n    select(matcher: ElementMatcher, executor: ScopeExecutor): Scope {\n        this.addSubscription(new MatchingElementsSubscription(this.element, matcher, this.buildSelectExecutor(executor)));\n\n        return this;\n    }\n\n    when(matcher: ElementMatcher, executor: ScopeExecutor): Scope {\n\t\tthis.addSubscription(new ElementMatchesSubscription(this.element, matcher, this.buildWhenExecutor(executor)));\n\n        return this;\n    }\n\n    on(matcher: EventMatcher, executor: SubscriptionExecutor): Scope {\n        this.addSubscription(new EventSubscription(this.element, matcher, executor));\n\n        return this;\n    }\n\n    // This method is for testing\n    pristine(): void {\n        for(let subscription of this.subscriptions) {\n            subscription.disconnect();\n        }\n        \n        this.subscriptions.splice(0);\n    }\n\n    protected activate(): void {\n        if(!this.isActivated) {\n            this.isActivated = true;\n\n            for(let subscription of this.subscriptions) {\n                subscription.connect();\n            }\n        }\n    }\n\n    protected deactivate(): void {\n        if(this.isActivated) {\n            for(let subscription of this.subscriptions) {\n                subscription.disconnect();\n            }\n\n            this.isActivated = false;            \n        }\n    }\n\n    private addSubscription(subscription: Subscription): void {\n        this.subscriptions.push(subscription);\n\n        if(this.isActivated) {\n            subscription.connect();\n        }\n    }\n\n    private removeSubscription(subscription: Subscription): void {\n        var index = this.subscriptions.indexOf(subscription);\n\n        if(index >= 0) {\n            subscription.disconnect();\n\n            this.subscriptions.splice(index, 1);\n        }\n    }\n\n    private buildSelectExecutor(executor: ScopeExecutor): SubscriptionExecutor {\n        let scopes: Scope[] = [];\n\n        return (element: Element, event: MatchingElementsChangedEvent) => {\n            for(let element of event.addedElements) {\n                let scope = new Scope(element, executor);\n\n                scopes.push(scope);\t\n                scope.activate();\n            }\n\n            for(let element of event.removedElements) {\n                for(let index = 0, length = scopes.length, scope : Scope; index < length; index++) {\n                    scope = scopes[index];\n\n                    if(scope.element === element) {\n                        scope.deactivate();\n                        \n                        scopes.splice(index, 1);\n                        break;\n                    }\n                }\n            }\n        };\n    }\n\n    private buildWhenExecutor(executor: ScopeExecutor): SubscriptionExecutor {\n        let scope : Scope = null;\n\n        return (element: Element, event: ElementMatchsChangedEvent) => {\n            if(event.isMatching) {\n                scope = new Scope(this.element, executor);\n                scope.activate();\n            }else{\n                scope.deactivate();\n                scope = null;\n            }\n        };\n    }\n}\n","import { ElementMatcher, ElementCollector } from './element_collector';\n\nexport default { Subscription, TrivialSubscription, EventSubscription, MatchingElementsSubscription, ElementMatchesSubscription };\n\nexport interface SubscriptionExecutor { (element: Element, event?: Event | DeclEvent): void }\n\nexport abstract class Subscription {\n    protected readonly executor: SubscriptionExecutor;\n    protected readonly element: Element;\n    \n    constructor(element: Element, executor: SubscriptionExecutor) {\n        this.element = element;\n        this.executor = executor;\n    }\n\n    abstract connect() : void;\n    abstract disconnect() : void;\n}\n\nexport interface TrivialSubscriptionConfiguration {\n    connected?: boolean,\n    disconnected?: boolean\n}\n\nexport class TrivialSubscription extends Subscription {\n    private isConnected: boolean;\n    private config: TrivialSubscriptionConfiguration;\n\n    constructor(element: Element, config: TrivialSubscriptionConfiguration, executor: SubscriptionExecutor) {\n        super(element, executor);\n\n        this.config = config;\n    }\n\n    connect() {\n        if(!this.isConnected) {\n            this.isConnected = true;\n\n            if(this.config.connected) {\n                this.executor(this.element);            \n            }\n        }\n    }\n\n    disconnect() {\n        if(this.isConnected) {\n            this.isConnected = false;\n\n            if(this.config.disconnected) {\n                this.executor(this.element);            \n            }\n        }\n    }\n}\n\nexport declare type EventMatcher = string;\n\nexport class EventSubscription extends Subscription {\n    readonly eventMatcher: EventMatcher;\n\n    private isConnected : boolean = false;    \n    private readonly eventListener: EventListener;\n    private readonly eventNames: string[];\n\n    constructor(element: Element, eventMatcher: EventMatcher, executor: SubscriptionExecutor) {\n        super(element, executor);\n\n        this.eventMatcher = eventMatcher;\n        this.eventNames = this.parseEventMatcher(this.eventMatcher);\n\n        this.eventListener = (event: Event): void => {\n            this.handleEvent(event);\n        }\n    }\n\n    connect(): void {\n        if(!this.isConnected) {\n            this.isConnected = true;\n\n            for(let eventName of this.eventNames) {\n                this.element.addEventListener(eventName, this.eventListener, false);\n            }\n        }\n    }\n\n    disconnect(): void {\n        if(this.isConnected) {\n            for(let eventName of this.eventNames) {\n                this.element.removeEventListener(eventName, this.eventListener, false);\n            }            \n\n            this.isConnected = false;\n        }\n    }\n\n    private handleEvent(event: Event): void {\n        this.executor(this.element, event);         \n    }\n\n    private parseEventMatcher(eventMatcher: EventMatcher): string[] {\n        // TODO: Support all of the jQuery style event options\n        return eventMatcher.split(' ');\n    } \n}\n\nabstract class BatchedMutationSubscription extends Subscription {\n    static readonly mutationObserverInit: MutationObserverInit = {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true\n    };\n\n    private isListening : boolean = false;\n    private handleMutationTimeout : any = null;\n\n    private readonly mutationCallback: MutationCallback;\n    private readonly mutationObserver: MutationObserver;\n\n    constructor(element: Element, executor: SubscriptionExecutor) {\n        super(element, executor);\n\n        this.mutationCallback = (): void => {\n            this.deferHandleMutations();\n        }\n\n        this.mutationObserver = new MutationObserver(this.mutationCallback);\n    }\n\n    protected startListening(): void {\n        if(!this.isListening) {\n            this.mutationObserver.observe(this.element, BatchedMutationSubscription.mutationObserverInit);\n\n            this.isListening = true;\n        }\n    }\n\n    protected stopListening(): void {\n        if(this.isListening) {\n            this.mutationObserver.disconnect();\n            this.handleMutationsNow();\n\n            this.isListening = false;\n        }\n    }\n    \n    protected abstract handleMutations(): void;\n\n    private deferHandleMutations(): void {\n        if(this.handleMutationTimeout === null) {\n            this.handleMutationTimeout = setTimeout(() => { \n                try {\n                    this.mutationObserver.takeRecords();\n                    this.handleMutations();\n                }finally{\n                    this.handleMutationTimeout = null;\n                }\n            }, 0);\n        }\n    }\n\n    private handleMutationsNow(): void {\n        if(this.handleMutationTimeout !== null) {\n            clearTimeout(this.handleMutationTimeout);\n            this.handleMutationTimeout = null;\n\n            this.handleMutations();            \n        }\n    }\n}\n\nexport class DeclEvent {\n    readonly name : string;\n\n    constructor(name : string) {\n        this.name = name;\n    }\n}\n\nexport class MatchingElementsChangedEvent extends DeclEvent {\n    readonly matchingElementsSubscription: MatchingElementsSubscription;\n    readonly addedElements: Element[];\n    readonly removedElements: Element[];\n\n    constructor(matchingElementsSubscription: MatchingElementsSubscription, addedElements: Element[], removedElements: Element[]) {\n        super('MatchingElementsChanged')\n\n        this.matchingElementsSubscription = matchingElementsSubscription;\n        this.addedElements = addedElements;\n        this.removedElements = removedElements;\n    }\n}\n\nexport class MatchingElementsSubscription extends BatchedMutationSubscription {\n    readonly matcher: ElementMatcher;\n\n    private isConnected: boolean;\n    private matchingElements: Element[] = [];\n\n    constructor(element: Element, matcher: ElementMatcher, executor: SubscriptionExecutor) {\n        super(element, executor);\n\n        this.matcher = matcher;\n    }\n\n    connect(): void {\n        if(!this.isConnected) {\n            this.updateMatchingElements(this.collectMatchingElements());\n            this.startListening();\n\n            this.isConnected = true;\n        }\n    }\n\n    disconnect(): void {\n        if(this.isConnected) {\n            this.updateMatchingElements([]);\n            this.stopListening();\n\n            this.isConnected = false;\n        }        \n    }\n\n    protected handleMutations(): void {\n        this.updateMatchingElements(this.collectMatchingElements());\n    }\n\n    private updateMatchingElements(matchingElements: Element[]): void {\n        let previouslyMatchingElements = this.matchingElements;\n\n        let addedElements = arraySubtract(matchingElements, previouslyMatchingElements);\n        let removedElements = arraySubtract(previouslyMatchingElements, matchingElements);\n\n        this.matchingElements = matchingElements;   \n        \n        if(addedElements.length > 0 || removedElements.length > 0) {\n            let event = new MatchingElementsChangedEvent(this, addedElements, removedElements);\n\n            this.executor(this.element, event);\n        }\n    }\n\n    private collectMatchingElements(): Element[] {\n        return ElementCollector.collectMatchingElements(this.element, this.matcher);\n    }\n}\n\nexport class ElementMatchsChangedEvent extends DeclEvent {\n    readonly elementMatchesSubscription: ElementMatchesSubscription;\n    readonly isMatching: boolean;\n\n    constructor(elementMatchesSubscription: ElementMatchesSubscription, isMatching: boolean) {\n        super('ElementMatchsChangedEvent')\n\n        this.elementMatchesSubscription = elementMatchesSubscription;\n        this.isMatching = isMatching;\n    }\n}\n\nexport class ElementMatchesSubscription extends BatchedMutationSubscription {\n    readonly matcher: ElementMatcher;\n\n    private isConnected: boolean;\n    private isMatchingElement: boolean;\n\n    constructor(element: Element, matcher: ElementMatcher, executor: SubscriptionExecutor) {\n        super(element, executor);\n\n        this.matcher = matcher;\n    }\n\n    connect(): void {\n        if(!this.isConnected) {\n            this.updateIsMatchingElement(this.computeIsMatchingElement());\n            this.startListening();\n\n            this.isConnected = true;\n        }\n    }\n\n    disconnect(): void {\n        if(this.isConnected) {\n            this.updateIsMatchingElement(false);\n            this.stopListening();\n\n            this.isConnected = false;\n        }        \n    }\n\n    protected handleMutations(): void {\n        this.updateIsMatchingElement(this.computeIsMatchingElement());\n    }\n\n    private updateIsMatchingElement(isMatchingElement: boolean): void {\n        let wasMatchingElement = this.isMatchingElement;\n        this.isMatchingElement = wasMatchingElement;\n\n        if(wasMatchingElement !== isMatchingElement) {\n            let event = new ElementMatchsChangedEvent(this, isMatchingElement);\n\n            this.executor(this.element, event);\n        }\n    }\n\n    private computeIsMatchingElement(): boolean {\n        return ElementCollector.isMatchingElement(this.element, this.matcher);\n    }\n}\n\nfunction arraySubtract<T>(minuend: T[], subtrahend: T[]): T[] {\n    let difference: T[] = [];\n\n    for(let member of minuend) {\n        if(subtrahend.indexOf(member) === -1) {\n            difference.push(member);\n        }\n    }\n\n    return difference;\n}"]}