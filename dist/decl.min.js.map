{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/mutation-observer/index.js","src/decl.ts","src/declarations/declaration.ts","src/declarations/match_declaration.ts","src/declarations/on_declaration.ts","src/declarations/scope_tracking_declaration.ts","src/declarations/select_declaration.ts","src/declarations/unmatch_declaration.ts","src/declarations/when_declaration.ts","src/element_collector.ts","src/scope.ts","src/subscriptions/batched_mutation_subscription.ts","src/subscriptions/element_matches_subscription.ts","src/subscriptions/event_subscription.ts","src/subscriptions/matching_elements_subscription.ts","src/subscriptions/subscription.ts","src/subscriptions/trivial_subscription.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","scheduleCallback","observer","scheduledObservers","push","isScheduled","setImmediate","dispatchCallbacks","wrapIfNeeded","node","window","ShadowDOMPolyfill","observers","sort","o1","o2","uid_","anyNonEmpty","forEach","queue","takeRecords","removeTransientObserversFor","callback_","nodes_","registrations","registrationsTable","get","registration","removeTransientObservers","forEachAncestorAndObserverEnqueueRecord","target","callback","parentNode","j","options","subtree","record","enqueue","JsMutationObserver","this","records_","uidCounter","MutationRecord","type","addedNodes","removedNodes","previousSibling","nextSibling","attributeName","attributeNamespace","oldValue","copyMutationRecord","original","slice","getRecord","currentRecord","getRecordWithOldValue","recordWithOldValue","clearRecords","undefined","recordRepresentsCurrentMutation","selectRecord","lastRecord","newRecord","Registration","transientObservedNodes","MutationObserver","WebKitMutationObserver","MozMutationObserver","WeakMap","defineProperty","Object","counter","Date","now","name","Math","random","prototype","set","key","value","entry","writable","delete","hasValue","has","msSetImmediate","setImmediateQueue","sentinel","String","addEventListener","data","func","postMessage","observe","childList","attributes","characterData","attributeOldValue","attributeFilter","characterDataOldValue","SyntaxError","removeListeners","addListeners","disconnect","splice","copyOfRecords","records","recordToReplaceLast","addListeners_","removeListeners_","removeEventListener","addTransientObserver","handleEvent","stopImmediatePropagation","attrName","namespace","relatedNode","namespaceURI","attrChange","MutationEvent","ADDITION","prevValue","indexOf","changedNode","scope_1","Scope","default","Decl","root","scope","buildRootScope","select","matcher","executor","getDefaultInstance","on","getRootScope","inspect","includeSource","defaultInstance","document","documentElement","setDefaultInstance","decl","pristine","console","groupCollapsed","groupEnd","Declaration","element","isActivated","activate","subscription","connect","deactivate","declaration_1","trivial_subscription_1","MatchDeclaration","_super","_this","TrivialSubscription","connected","__extends","log","event_subscription_1","OnDeclaration","EventSubscription","ScopeTrackingDeclaration","apply","arguments","childScopes","removeAllChildScopes","getChildScopes","inspectChildScopes","_i","_a","addChildScope","removeChildScope","index","childScope","addChildScopeByElement","removeChildScopeByElement","getElement","scope_tracking_declaration_1","matching_elements_subscription_1","SelectDeclaration","MatchingElementsSubscription","event","addedElements","element_1","_b","_c","removedElements","element_2","UnmatchDeclaration","disconnected","element_matches_subscription_1","WhenDeclaration","ElementMatchesSubscription","isMatching","isArrayLike","toArray","arrayLike","Array","TypeError","isMemberOfArrayLike","haystack","needle","ElementCollector","isMatchingElement","rootElement","elementMatcher","getInstance","collectMatchingElements","instance","ELEMENT_MATCHER_TYPE_ERROR_MESSAGE","cssSelector","isMatchingElementFromCssSelector","object","isMatchingElementFromObject","elementVistor","isMatchingElementFromElementVistor","collectMatchingElementsFromCssSelector","collectMatchingElementsFromObject","collectMatchingElementsFromElementVistor","matches","querySelectorAll","Element","visitorResult","_element","elements","children","length_1","child","match_declaration_1","unmatch_declaration_1","on_declaration_1","select_declaration_1","when_declaration_1","executors","declarations","addExecutor","getDeclarations","removeAllDeclarations","match","addDeclaration","unmatch","when","eventMatcher","executorOrElementMatcher","maybeExecutor","argumentsCount","onWithTwoArguments","onWithThreeArguments","declaration","removeDeclaration","subscription_1","Subscription","SubscriptionEvent","BatchedMutationSubscription","isListening","handleMutationTimeout","mutationCallback","deferHandleMutations","mutationObserver","startListening","mutationObserverInit","stopListening","handleMutationsNow","setTimeout","handleMutations","clearTimeout","batched_mutation_subscription_1","element_collector_1","isConnected","updateIsMatchingElement","computeIsMatchingElement","wasMatchingElement","event_1","ElementMatchesChangedEvent","elementMatchesSubscription","eventNames","parseEventMatcher","eventListener","eventName","split","arraySubtract","minuend","subtrahend","difference","minuend_1","member","matchingElements","updateMatchingElements","previouslyMatchingElements","MatchingElementsChangedEvent","matchingElementsSubscription","ElementConnectionChangedEvent","trivialSubscription","config","buildElementConnectionChangedEvent"],"mappings":"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","file":"decl.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var MutationObserver = window.MutationObserver\n  || window.WebKitMutationObserver\n  || window.MozMutationObserver;\n\n/*\n * Copyright 2012 The Polymer Authors. All rights reserved.\n * Use of this source code is goverened by a BSD-style\n * license that can be found in the LICENSE file.\n */\n\nvar WeakMap = window.WeakMap;\n\nif (typeof WeakMap === 'undefined') {\n  var defineProperty = Object.defineProperty;\n  var counter = Date.now() % 1e9;\n\n  WeakMap = function() {\n    this.name = '__st' + (Math.random() * 1e9 >>> 0) + (counter++ + '__');\n  };\n\n  WeakMap.prototype = {\n    set: function(key, value) {\n      var entry = key[this.name];\n      if (entry && entry[0] === key)\n        entry[1] = value;\n      else\n        defineProperty(key, this.name, {value: [key, value], writable: true});\n      return this;\n    },\n    get: function(key) {\n      var entry;\n      return (entry = key[this.name]) && entry[0] === key ?\n          entry[1] : undefined;\n    },\n    'delete': function(key) {\n      var entry = key[this.name];\n      if (!entry) return false;\n      var hasValue = entry[0] === key;\n      entry[0] = entry[1] = undefined;\n      return hasValue;\n    },\n    has: function(key) {\n      var entry = key[this.name];\n      if (!entry) return false;\n      return entry[0] === key;\n    }\n  };\n}\n\nvar registrationsTable = new WeakMap();\n\n// We use setImmediate or postMessage for our future callback.\nvar setImmediate = window.msSetImmediate;\n\n// Use post message to emulate setImmediate.\nif (!setImmediate) {\n  var setImmediateQueue = [];\n  var sentinel = String(Math.random());\n  window.addEventListener('message', function(e) {\n    if (e.data === sentinel) {\n      var queue = setImmediateQueue;\n      setImmediateQueue = [];\n      queue.forEach(function(func) {\n        func();\n      });\n    }\n  });\n  setImmediate = function(func) {\n    setImmediateQueue.push(func);\n    window.postMessage(sentinel, '*');\n  };\n}\n\n// This is used to ensure that we never schedule 2 callas to setImmediate\nvar isScheduled = false;\n\n// Keep track of observers that needs to be notified next time.\nvar scheduledObservers = [];\n\n/**\n * Schedules |dispatchCallback| to be called in the future.\n * @param {MutationObserver} observer\n */\nfunction scheduleCallback(observer) {\n  scheduledObservers.push(observer);\n  if (!isScheduled) {\n    isScheduled = true;\n    setImmediate(dispatchCallbacks);\n  }\n}\n\nfunction wrapIfNeeded(node) {\n  return window.ShadowDOMPolyfill &&\n      window.ShadowDOMPolyfill.wrapIfNeeded(node) ||\n      node;\n}\n\nfunction dispatchCallbacks() {\n  // http://dom.spec.whatwg.org/#mutation-observers\n\n  isScheduled = false; // Used to allow a new setImmediate call above.\n\n  var observers = scheduledObservers;\n  scheduledObservers = [];\n  // Sort observers based on their creation UID (incremental).\n  observers.sort(function(o1, o2) {\n    return o1.uid_ - o2.uid_;\n  });\n\n  var anyNonEmpty = false;\n  observers.forEach(function(observer) {\n\n    // 2.1, 2.2\n    var queue = observer.takeRecords();\n    // 2.3. Remove all transient registered observers whose observer is mo.\n    removeTransientObserversFor(observer);\n\n    // 2.4\n    if (queue.length) {\n      observer.callback_(queue, observer);\n      anyNonEmpty = true;\n    }\n  });\n\n  // 3.\n  if (anyNonEmpty)\n    dispatchCallbacks();\n}\n\nfunction removeTransientObserversFor(observer) {\n  observer.nodes_.forEach(function(node) {\n    var registrations = registrationsTable.get(node);\n    if (!registrations)\n      return;\n    registrations.forEach(function(registration) {\n      if (registration.observer === observer)\n        registration.removeTransientObservers();\n    });\n  });\n}\n\n/**\n * This function is used for the \"For each registered observer observer (with\n * observer's options as options) in target's list of registered observers,\n * run these substeps:\" and the \"For each ancestor ancestor of target, and for\n * each registered observer observer (with options options) in ancestor's list\n * of registered observers, run these substeps:\" part of the algorithms. The\n * |options.subtree| is checked to ensure that the callback is called\n * correctly.\n *\n * @param {Node} target\n * @param {function(MutationObserverInit):MutationRecord} callback\n */\nfunction forEachAncestorAndObserverEnqueueRecord(target, callback) {\n  for (var node = target; node; node = node.parentNode) {\n    var registrations = registrationsTable.get(node);\n\n    if (registrations) {\n      for (var j = 0; j < registrations.length; j++) {\n        var registration = registrations[j];\n        var options = registration.options;\n\n        // Only target ignores subtree.\n        if (node !== target && !options.subtree)\n          continue;\n\n        var record = callback(options);\n        if (record)\n          registration.enqueue(record);\n      }\n    }\n  }\n}\n\nvar uidCounter = 0;\n\n/**\n * The class that maps to the DOM MutationObserver interface.\n * @param {Function} callback.\n * @constructor\n */\nfunction JsMutationObserver(callback) {\n  this.callback_ = callback;\n  this.nodes_ = [];\n  this.records_ = [];\n  this.uid_ = ++uidCounter;\n}\n\nJsMutationObserver.prototype = {\n  observe: function(target, options) {\n    target = wrapIfNeeded(target);\n\n    // 1.1\n    if (!options.childList && !options.attributes && !options.characterData ||\n\n        // 1.2\n        options.attributeOldValue && !options.attributes ||\n\n        // 1.3\n        options.attributeFilter && options.attributeFilter.length &&\n            !options.attributes ||\n\n        // 1.4\n        options.characterDataOldValue && !options.characterData) {\n\n      throw new SyntaxError();\n    }\n\n    var registrations = registrationsTable.get(target);\n    if (!registrations)\n      registrationsTable.set(target, registrations = []);\n\n    // 2\n    // If target's list of registered observers already includes a registered\n    // observer associated with the context object, replace that registered\n    // observer's options with options.\n    var registration;\n    for (var i = 0; i < registrations.length; i++) {\n      if (registrations[i].observer === this) {\n        registration = registrations[i];\n        registration.removeListeners();\n        registration.options = options;\n        break;\n      }\n    }\n\n    // 3.\n    // Otherwise, add a new registered observer to target's list of registered\n    // observers with the context object as the observer and options as the\n    // options, and add target to context object's list of nodes on which it\n    // is registered.\n    if (!registration) {\n      registration = new Registration(this, target, options);\n      registrations.push(registration);\n      this.nodes_.push(target);\n    }\n\n    registration.addListeners();\n  },\n\n  disconnect: function() {\n    this.nodes_.forEach(function(node) {\n      var registrations = registrationsTable.get(node);\n      for (var i = 0; i < registrations.length; i++) {\n        var registration = registrations[i];\n        if (registration.observer === this) {\n          registration.removeListeners();\n          registrations.splice(i, 1);\n          // Each node can only have one registered observer associated with\n          // this observer.\n          break;\n        }\n      }\n    }, this);\n    this.records_ = [];\n  },\n\n  takeRecords: function() {\n    var copyOfRecords = this.records_;\n    this.records_ = [];\n    return copyOfRecords;\n  }\n};\n\n/**\n * @param {string} type\n * @param {Node} target\n * @constructor\n */\nfunction MutationRecord(type, target) {\n  this.type = type;\n  this.target = target;\n  this.addedNodes = [];\n  this.removedNodes = [];\n  this.previousSibling = null;\n  this.nextSibling = null;\n  this.attributeName = null;\n  this.attributeNamespace = null;\n  this.oldValue = null;\n}\n\nfunction copyMutationRecord(original) {\n  var record = new MutationRecord(original.type, original.target);\n  record.addedNodes = original.addedNodes.slice();\n  record.removedNodes = original.removedNodes.slice();\n  record.previousSibling = original.previousSibling;\n  record.nextSibling = original.nextSibling;\n  record.attributeName = original.attributeName;\n  record.attributeNamespace = original.attributeNamespace;\n  record.oldValue = original.oldValue;\n  return record;\n};\n\n// We keep track of the two (possibly one) records used in a single mutation.\nvar currentRecord, recordWithOldValue;\n\n/**\n * Creates a record without |oldValue| and caches it as |currentRecord| for\n * later use.\n * @param {string} oldValue\n * @return {MutationRecord}\n */\nfunction getRecord(type, target) {\n  return currentRecord = new MutationRecord(type, target);\n}\n\n/**\n * Gets or creates a record with |oldValue| based in the |currentRecord|\n * @param {string} oldValue\n * @return {MutationRecord}\n */\nfunction getRecordWithOldValue(oldValue) {\n  if (recordWithOldValue)\n    return recordWithOldValue;\n  recordWithOldValue = copyMutationRecord(currentRecord);\n  recordWithOldValue.oldValue = oldValue;\n  return recordWithOldValue;\n}\n\nfunction clearRecords() {\n  currentRecord = recordWithOldValue = undefined;\n}\n\n/**\n * @param {MutationRecord} record\n * @return {boolean} Whether the record represents a record from the current\n * mutation event.\n */\nfunction recordRepresentsCurrentMutation(record) {\n  return record === recordWithOldValue || record === currentRecord;\n}\n\n/**\n * Selects which record, if any, to replace the last record in the queue.\n * This returns |null| if no record should be replaced.\n *\n * @param {MutationRecord} lastRecord\n * @param {MutationRecord} newRecord\n * @param {MutationRecord}\n */\nfunction selectRecord(lastRecord, newRecord) {\n  if (lastRecord === newRecord)\n    return lastRecord;\n\n  // Check if the the record we are adding represents the same record. If\n  // so, we keep the one with the oldValue in it.\n  if (recordWithOldValue && recordRepresentsCurrentMutation(lastRecord))\n    return recordWithOldValue;\n\n  return null;\n}\n\n/**\n * Class used to represent a registered observer.\n * @param {MutationObserver} observer\n * @param {Node} target\n * @param {MutationObserverInit} options\n * @constructor\n */\nfunction Registration(observer, target, options) {\n  this.observer = observer;\n  this.target = target;\n  this.options = options;\n  this.transientObservedNodes = [];\n}\n\nRegistration.prototype = {\n  enqueue: function(record) {\n    var records = this.observer.records_;\n    var length = records.length;\n\n    // There are cases where we replace the last record with the new record.\n    // For example if the record represents the same mutation we need to use\n    // the one with the oldValue. If we get same record (this can happen as we\n    // walk up the tree) we ignore the new record.\n    if (records.length > 0) {\n      var lastRecord = records[length - 1];\n      var recordToReplaceLast = selectRecord(lastRecord, record);\n      if (recordToReplaceLast) {\n        records[length - 1] = recordToReplaceLast;\n        return;\n      }\n    } else {\n      scheduleCallback(this.observer);\n    }\n\n    records[length] = record;\n  },\n\n  addListeners: function() {\n    this.addListeners_(this.target);\n  },\n\n  addListeners_: function(node) {\n    var options = this.options;\n    if (options.attributes)\n      node.addEventListener('DOMAttrModified', this, true);\n\n    if (options.characterData)\n      node.addEventListener('DOMCharacterDataModified', this, true);\n\n    if (options.childList)\n      node.addEventListener('DOMNodeInserted', this, true);\n\n    if (options.childList || options.subtree)\n      node.addEventListener('DOMNodeRemoved', this, true);\n  },\n\n  removeListeners: function() {\n    this.removeListeners_(this.target);\n  },\n\n  removeListeners_: function(node) {\n    var options = this.options;\n    if (options.attributes)\n      node.removeEventListener('DOMAttrModified', this, true);\n\n    if (options.characterData)\n      node.removeEventListener('DOMCharacterDataModified', this, true);\n\n    if (options.childList)\n      node.removeEventListener('DOMNodeInserted', this, true);\n\n    if (options.childList || options.subtree)\n      node.removeEventListener('DOMNodeRemoved', this, true);\n  },\n\n  /**\n   * Adds a transient observer on node. The transient observer gets removed\n   * next time we deliver the change records.\n   * @param {Node} node\n   */\n  addTransientObserver: function(node) {\n    // Don't add transient observers on the target itself. We already have all\n    // the required listeners set up on the target.\n    if (node === this.target)\n      return;\n\n    this.addListeners_(node);\n    this.transientObservedNodes.push(node);\n    var registrations = registrationsTable.get(node);\n    if (!registrations)\n      registrationsTable.set(node, registrations = []);\n\n    // We know that registrations does not contain this because we already\n    // checked if node === this.target.\n    registrations.push(this);\n  },\n\n  removeTransientObservers: function() {\n    var transientObservedNodes = this.transientObservedNodes;\n    this.transientObservedNodes = [];\n\n    transientObservedNodes.forEach(function(node) {\n      // Transient observers are never added to the target.\n      this.removeListeners_(node);\n\n      var registrations = registrationsTable.get(node);\n      for (var i = 0; i < registrations.length; i++) {\n        if (registrations[i] === this) {\n          registrations.splice(i, 1);\n          // Each node can only have one registered observer associated with\n          // this observer.\n          break;\n        }\n      }\n    }, this);\n  },\n\n  handleEvent: function(e) {\n    // Stop propagation since we are managing the propagation manually.\n    // This means that other mutation events on the page will not work\n    // correctly but that is by design.\n    e.stopImmediatePropagation();\n\n    switch (e.type) {\n      case 'DOMAttrModified':\n        // http://dom.spec.whatwg.org/#concept-mo-queue-attributes\n\n        var name = e.attrName;\n        var namespace = e.relatedNode.namespaceURI;\n        var target = e.target;\n\n        // 1.\n        var record = new getRecord('attributes', target);\n        record.attributeName = name;\n        record.attributeNamespace = namespace;\n\n        // 2.\n        var oldValue =\n            e.attrChange === MutationEvent.ADDITION ? null : e.prevValue;\n\n        forEachAncestorAndObserverEnqueueRecord(target, function(options) {\n          // 3.1, 4.2\n          if (!options.attributes)\n            return;\n\n          // 3.2, 4.3\n          if (options.attributeFilter && options.attributeFilter.length &&\n              options.attributeFilter.indexOf(name) === -1 &&\n              options.attributeFilter.indexOf(namespace) === -1) {\n            return;\n          }\n          // 3.3, 4.4\n          if (options.attributeOldValue)\n            return getRecordWithOldValue(oldValue);\n\n          // 3.4, 4.5\n          return record;\n        });\n\n        break;\n\n      case 'DOMCharacterDataModified':\n        // http://dom.spec.whatwg.org/#concept-mo-queue-characterdata\n        var target = e.target;\n\n        // 1.\n        var record = getRecord('characterData', target);\n\n        // 2.\n        var oldValue = e.prevValue;\n\n\n        forEachAncestorAndObserverEnqueueRecord(target, function(options) {\n          // 3.1, 4.2\n          if (!options.characterData)\n            return;\n\n          // 3.2, 4.3\n          if (options.characterDataOldValue)\n            return getRecordWithOldValue(oldValue);\n\n          // 3.3, 4.4\n          return record;\n        });\n\n        break;\n\n      case 'DOMNodeRemoved':\n        this.addTransientObserver(e.target);\n        // Fall through.\n      case 'DOMNodeInserted':\n        // http://dom.spec.whatwg.org/#concept-mo-queue-childlist\n        var target = e.relatedNode;\n        var changedNode = e.target;\n        var addedNodes, removedNodes;\n        if (e.type === 'DOMNodeInserted') {\n          addedNodes = [changedNode];\n          removedNodes = [];\n        } else {\n\n          addedNodes = [];\n          removedNodes = [changedNode];\n        }\n        var previousSibling = changedNode.previousSibling;\n        var nextSibling = changedNode.nextSibling;\n\n        // 1.\n        var record = getRecord('childList', target);\n        record.addedNodes = addedNodes;\n        record.removedNodes = removedNodes;\n        record.previousSibling = previousSibling;\n        record.nextSibling = nextSibling;\n\n        forEachAncestorAndObserverEnqueueRecord(target, function(options) {\n          // 2.1, 3.2\n          if (!options.childList)\n            return;\n\n          // 2.2, 3.3\n          return record;\n        });\n\n    }\n\n    clearRecords();\n  }\n};\n\nif (!MutationObserver) {\n  MutationObserver = JsMutationObserver;\n}\n\nmodule.exports = MutationObserver;\n","import { Scope, ElementMatcher, EventMatcher, ScopeExecutor, SubscriptionExecutor } from './scope';\n\nexport default Decl;\n\nexport { Scope, ElementMatcher, EventMatcher, ScopeExecutor, SubscriptionExecutor };\n\nexport class Decl {\n    private static defaultInstance: Decl | null = null;\n\n    static select(matcher: ElementMatcher, executor: ScopeExecutor): Scope {\n        return this.getDefaultInstance().select(matcher, executor);\n    }\n\n    static on(matcher: EventMatcher, executor: SubscriptionExecutor): Scope {\n        return this.getDefaultInstance().on(matcher, executor);\n    }\n\n    static getRootScope(): Scope {\n        return this.getDefaultInstance().getRootScope();\n    }\n\n    static inspect(includeSource?: boolean): void {\n        this.getDefaultInstance().inspect(includeSource);\n    }\n\n    static getDefaultInstance() : Decl {\n        return this.defaultInstance || (this.defaultInstance = new Decl(document.documentElement));\n    }\n\n    static setDefaultInstance(decl: Decl) : Decl {\n        return this.defaultInstance = decl;\n    }\n\n    static pristine(): void {\n        if(this.defaultInstance) {\n            this.defaultInstance.pristine();\n            this.defaultInstance = null;\n        }\n    }\n\n    private scope: Scope;\n\n    constructor(root: Element) {\n        this.scope = Scope.buildRootScope(root);\n    }\n\n    select(matcher: ElementMatcher, executor: ScopeExecutor): Scope {\n        return this.scope.select(matcher, executor);\n    }\n\n    on(matcher: EventMatcher, executor: SubscriptionExecutor): Scope {\n        return this.scope.on(matcher, executor);\n    }\n\n    getRootScope(): Scope {\n       return this.scope; \n    }\n\n    inspect(includeSource?: boolean): void {\n        console.groupCollapsed('<<root>>');\n        \n        try {\n            this.scope.inspect(includeSource);        \n        }finally{\n            console.groupEnd();\n        }\n    }\n\n    pristine(): void {\n        this.scope.pristine();\n    }\n}\n\n// Export to a global for the browser (there *has* to be a better way to do this!)\nif(typeof(window) !== 'undefined') {\n    (<any>window).Decl = Decl;\n}\n","import { Subscription, SubscriptionExecutor } from '../subscriptions/subscription';\n\nexport { SubscriptionExecutor };\n\nexport abstract class Declaration {\n    protected isActivated: boolean = false;\n    protected readonly element: Element;\n    protected readonly subscription: Subscription;\n\n    constructor(element: Element) {\n        this.element = element;\n    }\n\n    activate(): void {\n        if(!this.isActivated) {\n            this.isActivated = true;\n\n            this.subscription.connect();\n        }\n    }\n\n    deactivate(): void {\n        if(this.isActivated) {\n            this.isActivated = false;\n\n            this.subscription.disconnect();\n        }        \n    }\n\n    abstract inspect(includeSource?: boolean): void;\n}","import { Declaration, SubscriptionExecutor } from './declaration';\nimport { TrivialSubscription } from '../subscriptions/trivial_subscription';\n\nexport { SubscriptionExecutor };\n\nexport class MatchDeclaration extends Declaration {\n    protected readonly subscription: TrivialSubscription;\n    protected readonly executor: SubscriptionExecutor;\n\n    constructor(element: Element, executor: SubscriptionExecutor) {\n        super(element);\n\n        this.executor = executor;\n\n        this.subscription = new TrivialSubscription(this.element, { connected: true }, this.executor);\n    }\n\n    inspect(): void {\n        console.groupCollapsed('matches');\n        console.log(this.executor);\n        console.groupEnd();\n    }\n}","import { Declaration, SubscriptionExecutor } from './declaration';\nimport { EventSubscription, EventMatcher } from '../subscriptions/event_subscription';\n\nexport { EventMatcher, SubscriptionExecutor };\n\nexport class OnDeclaration extends Declaration {\n    protected subscription: EventSubscription;\n    protected matcher: EventMatcher;\n    protected executor: SubscriptionExecutor;\n\n    constructor(element: Element, matcher: EventMatcher, executor: SubscriptionExecutor) {\n        super(element);\n\n        this.matcher = matcher;\n        this.executor = executor;\n\n        this.subscription = new EventSubscription(this.element, this.matcher, this.executor);    \n    }\n\n    inspect(): void {\n        (<any>console.groupCollapsed)('on', this.matcher);\n\n        try {\n            console.log(this.executor);\n        }finally{\n            console.groupEnd();\n        }\n    }\n}","import { Declaration } from './declaration';\nimport { ElementMatcher } from '../element_collector';\nimport { Scope, ScopeExecutor } from '../scope';\n\nexport { ElementMatcher, ScopeExecutor };\n\nexport abstract class ScopeTrackingDeclaration extends Declaration {\n    private readonly childScopes: Scope[] = [];\n    \n    deactivate(): void {\n        this.removeAllChildScopes();\n        super.deactivate();\n    }\n\n    getChildScopes() {\n        return this.childScopes;\n    }\n\n    protected inspectChildScopes(includeSource?: boolean): void {        \n        for(let childScope of this.childScopes) {\n            childScope.inspect(includeSource);\n        }\n    }\n\n    protected addChildScope(scope: Scope) {\n        if(this.isActivated) {\n            this.childScopes.push(scope);\n\n            scope.activate();\n        }\n    }\n\n    protected removeChildScope(scope: Scope) { \n        scope.deactivate();\n\n        if(this.isActivated) {\n            let index = this.childScopes.indexOf(scope);\n            \n            if(index >= 0) {\n                this.childScopes.splice(index, 1);\n            }\n        }\n    }\n\n    protected removeAllChildScopes() {\n        let childScope: Scope;\n\n        while(childScope = this.childScopes[0]) {\n            this.removeChildScope(childScope);\n        }\n    }\n\n    protected addChildScopeByElement(element: Element, executor?: ScopeExecutor) {\n        let childScope = new Scope(element, executor);\n\n        this.addChildScope(childScope);\n    }\n\n    protected removeChildScopeByElement(element: Element) {\n        for(let childScope of this.childScopes) {\n            if(childScope.getElement() === element) {\n                this.removeChildScope(childScope);\n                return; // loop must exist to avoid data-race\n            }\n        }\n    }\n}","import { ScopeTrackingDeclaration, ElementMatcher, ScopeExecutor } from './scope_tracking_declaration';\nimport { MatchingElementsSubscription, MatchingElementsChangedEvent } from '../subscriptions/matching_elements_subscription';\n\nexport { ElementMatcher, ScopeExecutor };\n\nexport class SelectDeclaration extends ScopeTrackingDeclaration {\n    protected subscription: MatchingElementsSubscription;\n    protected matcher: ElementMatcher;\n    protected executor: ScopeExecutor;\n\n    constructor(element: Element, matcher: ElementMatcher, executor: ScopeExecutor) {\n        super(element);\n\n        this.matcher = matcher;\n        this.executor = executor;\n\n        this.subscription = new MatchingElementsSubscription(this.element, this.matcher, (event: MatchingElementsChangedEvent) => {\n            for(let element of event.addedElements) {\n                this.addChildScopeByElement(element, this.executor);\n            }\n\n            for(let element of event.removedElements) {\n                this.removeChildScopeByElement(element);\n            }\n        });\n    }\n\n    inspect(includeSource?: boolean): void {\n        (<any>console.groupCollapsed)('select', this.matcher);\n\n        try{\n            this.inspectChildScopes(includeSource);        \n        }finally{\n            console.groupEnd();\n        }\n    }\n}","import { Declaration } from './declaration';\nimport { TrivialSubscription, SubscriptionExecutor } from '../subscriptions/trivial_subscription';\n\nexport { SubscriptionExecutor };\n\nexport class UnmatchDeclaration extends Declaration {\n    protected subscription: TrivialSubscription;\n    protected executor: SubscriptionExecutor;\n\n    constructor(element: Element, executor: SubscriptionExecutor) {\n        super(element);\n\n        this.executor = executor;\n\n        this.subscription = new TrivialSubscription(this.element, { disconnected: true }, this.executor);\n    }\n\n    inspect(): void {\n        console.groupCollapsed('unmatches');\n        console.log(this.executor);\n        console.groupEnd();\n    }\n}","import { ScopeTrackingDeclaration, ElementMatcher, ScopeExecutor } from './scope_tracking_declaration';\nimport { ElementMatchesSubscription, ElementMatchesChangedEvent } from '../subscriptions/element_matches_subscription';\n\nexport { ElementMatcher, ScopeExecutor };\n\nexport class WhenDeclaration extends ScopeTrackingDeclaration {\n    protected subscription: ElementMatchesSubscription;\n    protected matcher: ElementMatcher;\n    protected executor: ScopeExecutor;\n\n    constructor(element: Element, matcher: ElementMatcher, executor: ScopeExecutor) {\n        super(element);\n\n        this.matcher = matcher;\n        this.executor = executor;\n\n        this.subscription = new ElementMatchesSubscription(this.element, this.matcher, (event: ElementMatchesChangedEvent) => {\n            if(event.isMatching) {\n                this.addChildScopeByElement(element, this.executor);\n            }else{\n                this.removeChildScopeByElement(element);\n            }\n        });\n    }\n\n    inspect(includeSource?: boolean): void {\n        (<any>console.groupCollapsed)('when', this.matcher);\n\n        try{\n            this.inspectChildScopes(includeSource);        \n        }finally{\n            console.groupEnd();\n        }\n    }\n}","export default ElementCollector;\n\nexport interface ElementVistor { (element: Element): ElementMatcher | boolean }\nexport declare type ElementMatcher = string | NodeListOf<Element> | Element[] | ElementVistor;\n\nexport class ElementCollector {\n    private static instance: ElementCollector;\n    \n    private static readonly ELEMENT_MATCHER_TYPE_ERROR_MESSAGE = \"Decl: An `ElementMatcher` must be a CSS selector (string) or a function which takes a node under consideration and returns a CSS selector (string) that matches all matching nodes in the subtree, an array-like object of matching nodes in the subtree, or a boolean value as to whether the node should be included (in this case, the function will be invoked again for all children of the node).\";\n\n    static isMatchingElement(rootElement: Element, elementMatcher: ElementMatcher): boolean {\n        return this.getInstance().isMatchingElement(rootElement, elementMatcher);\n    }\n\n    static collectMatchingElements(rootElement: Element, elementMatcher: ElementMatcher): Element[] {\n        return this.getInstance().collectMatchingElements(rootElement, elementMatcher);\n    }\n\n    private static getInstance() : ElementCollector {\n        return this.instance || (this.instance = new ElementCollector());\n    }\n\n    isMatchingElement(element: Element, elementMatcher: ElementMatcher): boolean {\n        switch(typeof(elementMatcher)) {\n            default:\n                throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n                \n            case 'string':\n                let cssSelector: string = <string>elementMatcher;\n                return this.isMatchingElementFromCssSelector(element, cssSelector);\n            \n            case 'object':\n                let object = <Object>elementMatcher;\n                return this.isMatchingElementFromObject(element, object);\n                \n            case 'function':\n                let elementVistor = <ElementVistor>elementMatcher;\n                return this.isMatchingElementFromElementVistor(element, elementVistor);       \n        }\n    }\n\n    collectMatchingElements(element: Element, elementMatcher: ElementMatcher): Element[] {\n        switch(typeof(elementMatcher)) {\n            default:\n                throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n                \n            case 'string':\n                let cssSelector: string = <string>elementMatcher;\n                return this.collectMatchingElementsFromCssSelector(element, cssSelector);\n\n            case 'object':\n                let object = <Object>elementMatcher;\n                return this.collectMatchingElementsFromObject(element, object);\n                \n            case 'function':\n                let elementVistor = <ElementVistor>elementMatcher;\n                return this.collectMatchingElementsFromElementVistor(element, elementVistor);       \n        }\n    }\n\n    private isMatchingElementFromCssSelector(element: Element, cssSelector: string): boolean {\n        if(typeof(element.matches) === 'function') { // take a shortcut in modern browsers\n            return element.matches(cssSelector);\n        }else{\n            return isMemberOfArrayLike(document.querySelectorAll(cssSelector), element);\n        }\n    }\n\n    private isMatchingElementFromObject(element: Element, object: Object): boolean {\n        if(object === null) {\n            return false;\n        }else{\n            if(isArrayLike(object)) {\n                let arrayLike = <ArrayLike<any>>object;\n\n                if(arrayLike.length === 0 || arrayLike[0] instanceof Element) {\n                    return isMemberOfArrayLike(arrayLike, element);                \n                }else{\n                    throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n                }\n            }else{\n                throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n            }\n        }\n    }\n\n    private isMatchingElementFromElementVistor(element: Element, elementVistor: ElementVistor): boolean {\n        let visitorResult = elementVistor(element);\n\n        if(typeof(visitorResult) === 'boolean') {\n            let isMatch = <boolean>visitorResult;\n            return isMatch;\n        }else{\n            let elementMatcher = <ElementMatcher>visitorResult;\n            return this.isMatchingElement(element, elementMatcher);\n        }\n    }\n\n    private collectMatchingElementsFromCssSelector(element: Element, cssSelector: string): Element[] {\n        return toArray<Element>(element.querySelectorAll(cssSelector));\n    }\n\n    private collectMatchingElementsFromObject(_element: Element, object: Object): Element[] {\n        if(object === null) {\n            return [];\n        }else{\n            if(isArrayLike(object)) {\n                let arrayLike = <ArrayLike<any>>object;\n\n                if(arrayLike.length === 0 || arrayLike[0] instanceof Element) {\n                    return toArray<Element>(arrayLike);                \n                }else{\n                    throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n                }\n            }else{\n                throw new TypeError(ElementCollector.ELEMENT_MATCHER_TYPE_ERROR_MESSAGE);\n            }\n        }\n    }\n\n    private collectMatchingElementsFromElementVistor(element: Element, elementVistor: ElementVistor): Element[] {\n        let elements: Element[] = [];\n        let children = element.children;\n        \n        for(let index = 0, length = children.length; index < length; index++) {\n            let child = children[index];\n            \n            if(child instanceof Element) {\n                let element: Element = child;\n                let visitorResult = elementVistor(element);\n\n                if(typeof(visitorResult) === 'boolean') {\n                    let isMatch = <boolean>visitorResult;\n\n                    if(isMatch) {\n                        elements.push(element);\n                    }\n                }else{\n                    elements.push(...this.collectMatchingElements(element, visitorResult));\n                }\n            }\n        }\n\n        return elements;\n    }\n}\n\nfunction isArrayLike(value: any) {\n    return typeof(value) === 'object' && typeof(value.length) === 'number';\n}\n\nfunction toArray<T>(arrayLike: ArrayLike<T>): Array<T> {\n    if(isArrayLike(arrayLike)) {\n        return Array.prototype.slice.call(arrayLike, 0);\n    }else{\n        throw new TypeError('Expected ArrayLike');\n    }\n}\n\nfunction isMemberOfArrayLike(haystack: ArrayLike<any>,  needle: any) {\n    return Array.prototype.indexOf.call(haystack, needle) !== -1;\n}\n","import { Declaration, SubscriptionExecutor } from './declarations/declaration';\nimport { MatchDeclaration } from './declarations/match_declaration';\nimport { UnmatchDeclaration } from './declarations/unmatch_declaration';\nimport { OnDeclaration, EventMatcher } from './declarations/on_declaration';\n\nimport { ElementMatcher } from './declarations/scope_tracking_declaration';\nimport { SelectDeclaration } from './declarations/select_declaration';\nimport { WhenDeclaration } from './declarations/when_declaration';\n\nexport { Declaration, SubscriptionExecutor, ElementMatcher, EventMatcher };\n\nexport interface ScopeExecutor { \n    (scope: Scope, element: Element): void\n};\n\nexport class Scope {\n    static buildRootScope(element: Element): Scope {\n        let scope = new Scope(element);\n        scope.activate();\n\n        return scope;\n    }\n\n    private readonly element: Element;\n    private readonly executors: ScopeExecutor[] = [];\n\n    private isActivated: boolean = false;\n    private declarations: Declaration[] = [];\n\n    constructor(element: Element, executor?: ScopeExecutor) {\n        this.element = element;\n\n        if(executor) {\n            this.addExecutor(executor);\n        }\n    }\n\n    addExecutor(executor: ScopeExecutor): void {\n        this.executors.push(executor);\n\n        return executor.call(this, this, this.element);\n    }\n\n    getElement(): Element {\n        return this.element;\n    }\n\n    getDeclarations(): Declaration[] {\n        return this.declarations;\n    }\n\n    inspect(includeSource?: boolean): void {\n        (<any>console.groupCollapsed)(this.element);\n\n        try {\n            if(includeSource) {\n                console.groupCollapsed('source');\n            \n                for(let executor of this.executors) {\n                    console.log(executor);\n                }\n\n                console.groupEnd();\n            }\n            \n            for(let declaration of this.declarations) {\n                declaration.inspect(includeSource);\n            }\n        }finally{\n            (<any>console.groupEnd)();\n        }\n    }\n\n    activate(): void {\n        if(!this.isActivated) {\n            this.isActivated = true;\n\n            for(let declaration of this.declarations) {\n                declaration.activate();\n            }\n        }\n    }\n\n    deactivate(): void {        \n        if(this.isActivated) {\n            this.isActivated = false;            \n            \n            for(let declaration of this.declarations) {\n                declaration.deactivate();\n            }\n        }\n    }\n\n    pristine(): void {\n        this.deactivate();\n        this.removeAllDeclarations();\n    }\n\n    match(executor: SubscriptionExecutor): Scope {\n        this.addDeclaration(new MatchDeclaration(this.element, executor));\n\n        return this;\n    }\n\n    unmatch(executor: SubscriptionExecutor): Scope {\n        this.addDeclaration(new UnmatchDeclaration(this.element, executor));\n\n        return this;\n    }\n\n    select(matcher: ElementMatcher, executor: ScopeExecutor): Scope {\n        this.addDeclaration(new SelectDeclaration(this.element, matcher, executor));\n\n        return this;\n    }\n\n    when(matcher: ElementMatcher, executor: ScopeExecutor): Scope {\n\t\tthis.addDeclaration(new WhenDeclaration(this.element, matcher, executor));\n\n        return this;\n    }\n\n    on(eventMatcher: EventMatcher, executor: SubscriptionExecutor): Scope;\n    on(eventMatcher: EventMatcher, elementMatcher: ElementMatcher, executor: SubscriptionExecutor): Scope;\n    on(eventMatcher: EventMatcher, executorOrElementMatcher: SubscriptionExecutor | ElementMatcher, maybeExecutor?: SubscriptionExecutor): Scope {\n        let argumentsCount = arguments.length;\n\n        switch(argumentsCount) {\n            case 2:\n                return this.onWithTwoArguments(eventMatcher, <SubscriptionExecutor>executorOrElementMatcher);\n            case 3:\n                return this.onWithThreeArguments(eventMatcher, <ElementMatcher>executorOrElementMatcher, <SubscriptionExecutor>maybeExecutor);\n            default:\n                throw new TypeError(\"Failed to execute 'on' on 'Scope': 2 or 3 arguments required, but \" + argumentsCount + \" present.\");\n        }\n    }\n\n    private onWithTwoArguments(eventMatcher: EventMatcher, executor: SubscriptionExecutor): Scope {\n        this.addDeclaration(new OnDeclaration(this.element, eventMatcher, executor));\n\n        return this;\n    }\n\n    private onWithThreeArguments(eventMatcher: EventMatcher, elementMatcher: ElementMatcher, executor: SubscriptionExecutor): Scope {\n        this.select(elementMatcher, (scope) => {\n            scope.on(eventMatcher, executor);\n        });\n\n        return this;\n    }\n\n    private addDeclaration(declaration: Declaration): void {\n        this.declarations.push(declaration);\n\n        if(this.isActivated) {\n            declaration.activate();\n        }\n    }\n\n    private removeDeclaration(declaration: Declaration): void {  \n        let index = this.declarations.indexOf(declaration);\n\n        if(index >= 0) {\n            this.declarations.splice(index, 1);\n        }\n\n        declaration.deactivate();        \n    }\n\n    private removeAllDeclarations() {        \n        let declaration: Declaration;\n\n        while(declaration = this.declarations[0]) {\n            this.removeDeclaration(declaration);\n        }\n    }\n}\n","import { Subscription, SubscriptionExecutor, SubscriptionEvent } from './subscription';\n\ninterface CommonJsRequire {\n    (id: string): any;\n}\n\ndeclare var require: CommonJsRequire;\nlet MutationObserver = require('mutation-observer'); // use polyfill\n\nexport abstract class BatchedMutationSubscription extends Subscription {\n    static readonly mutationObserverInit: MutationObserverInit = {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true\n    };\n\n    private isListening : boolean = false;\n    private handleMutationTimeout : any = null;\n\n    private readonly mutationCallback: MutationCallback;\n    private readonly mutationObserver: MutationObserver;\n\n    constructor(element: Element, executor: SubscriptionExecutor) {\n        super(element, executor);\n\n        this.mutationCallback = (): void => {\n            this.deferHandleMutations();\n        }\n\n        this.mutationObserver = new MutationObserver(this.mutationCallback);\n    }\n\n    protected startListening(): void {\n        if(!this.isListening) {\n            this.mutationObserver.observe(this.element, BatchedMutationSubscription.mutationObserverInit);\n\n            this.isListening = true;\n        }\n    }\n\n    protected stopListening(): void {\n        if(this.isListening) {\n            this.mutationObserver.disconnect();\n            this.handleMutationsNow();\n\n            this.isListening = false;\n        }\n    }\n    \n    protected abstract handleMutations(): void;\n\n    private deferHandleMutations(): void {\n        if(this.handleMutationTimeout === null) {\n            this.handleMutationTimeout = setTimeout(() => { \n                try {\n                    this.mutationObserver.takeRecords();\n                    this.handleMutations();\n                }finally{\n                    this.handleMutationTimeout = null;\n                }\n            }, 0);\n        }\n    }\n\n    private handleMutationsNow(): void {\n        if(this.handleMutationTimeout !== null) {\n            clearTimeout(this.handleMutationTimeout);\n            this.handleMutationTimeout = null;\n\n            this.handleMutations();            \n        }\n    }\n}\n\nexport { Subscription, SubscriptionExecutor, SubscriptionEvent };","import { BatchedMutationSubscription, SubscriptionExecutor, SubscriptionEvent } from './batched_mutation_subscription';\nimport { ElementMatcher, ElementCollector } from '../element_collector';\n\nexport class ElementMatchesSubscription extends BatchedMutationSubscription {\n    readonly matcher: ElementMatcher;\n\n    private isConnected: boolean = false;\n    private isMatchingElement: boolean = false;\n\n    constructor(element: Element, matcher: ElementMatcher, executor: SubscriptionExecutor) {\n        super(element, executor);\n\n        this.matcher = matcher;\n    }\n\n    connect(): void {\n        if(!this.isConnected) {\n            this.updateIsMatchingElement(this.computeIsMatchingElement());\n            this.startListening();\n\n            this.isConnected = true;\n        }\n    }\n\n    disconnect(): void {\n        if(this.isConnected) {\n            this.stopListening();\n            this.updateIsMatchingElement(false);\n\n            this.isConnected = false;\n        }        \n    }\n\n    protected handleMutations(): void {\n        this.updateIsMatchingElement(this.computeIsMatchingElement());\n    }\n\n    private updateIsMatchingElement(isMatchingElement: boolean): void {\n        let wasMatchingElement = this.isMatchingElement;\n        this.isMatchingElement = isMatchingElement;\n\n        if(wasMatchingElement !== isMatchingElement) {\n            let event = new ElementMatchesChangedEvent(this, isMatchingElement);\n\n            this.executor(event, this.element);\n        }\n    }\n\n    private computeIsMatchingElement(): boolean {\n        return ElementCollector.isMatchingElement(this.element, this.matcher);\n    }\n}\n\nexport class ElementMatchesChangedEvent extends SubscriptionEvent {\n    readonly isMatching: boolean;\n\n    constructor(elementMatchesSubscription: ElementMatchesSubscription, isMatching: boolean) {\n        super(elementMatchesSubscription, 'ElementMatchesChangedEvent');\n\n        this.isMatching = isMatching;\n    }\n}\n\nexport { ElementMatcher };\n","import { Subscription, SubscriptionExecutor } from './subscription';\n\nexport { SubscriptionExecutor };\n\nexport class EventSubscription extends Subscription {\n    readonly eventMatcher: EventMatcher;\n    readonly eventNames: string[];\n\n    private isConnected : boolean = false;    \n    private readonly eventListener: EventListener;\n\n    constructor(element: Element, eventMatcher: EventMatcher, executor: SubscriptionExecutor) {\n        super(element, executor);\n\n        this.eventMatcher = eventMatcher;\n        this.eventNames = this.parseEventMatcher(this.eventMatcher);\n\n        this.eventListener = (event: Event): void => {\n            this.handleEvent(event);\n        }\n    }\n\n    connect(): void {\n        if(!this.isConnected) {\n            this.isConnected = true;\n\n            for(let eventName of this.eventNames) {\n                this.element.addEventListener(eventName, this.eventListener, false);\n            }\n        }\n    }\n\n    disconnect(): void {\n        if(this.isConnected) {\n            for(let eventName of this.eventNames) {\n                this.element.removeEventListener(eventName, this.eventListener, false);\n            }            \n\n            this.isConnected = false;\n        }\n    }\n\n    private handleEvent(event: Event): void {\n        this.executor(event, this.element);         \n    }\n\n    private parseEventMatcher(eventMatcher: EventMatcher): string[] {\n        // TODO: Support all of the jQuery style event options\n        return eventMatcher.split(' ');\n    } \n}\n\nexport declare type EventMatcher = string;\n","import { BatchedMutationSubscription, SubscriptionExecutor, SubscriptionEvent } from './batched_mutation_subscription';\nimport { ElementMatcher, ElementCollector } from '../element_collector';\n\nexport { ElementMatcher };\n\nexport class MatchingElementsSubscription extends BatchedMutationSubscription {\n    readonly matcher: ElementMatcher;\n\n    private isConnected: boolean = false;\n    private matchingElements: Element[] = [];\n\n    constructor(element: Element, matcher: ElementMatcher, executor: SubscriptionExecutor) {\n        super(element, executor);\n\n        this.matcher = matcher;\n    }\n\n    connect(): void {\n        if(!this.isConnected) {\n            this.updateMatchingElements(this.collectMatchingElements());\n            this.startListening();\n\n            this.isConnected = true;\n        }\n    }\n\n    disconnect(): void {\n        if(this.isConnected) {\n            this.stopListening();\n            this.updateMatchingElements([]);\n\n            this.isConnected = false;\n        }        \n    }\n\n    protected handleMutations(): void {\n        this.updateMatchingElements(this.collectMatchingElements());\n    }\n\n    private updateMatchingElements(matchingElements: Element[]): void {\n        let previouslyMatchingElements = this.matchingElements;\n\n        let addedElements = arraySubtract(matchingElements, previouslyMatchingElements);\n        let removedElements = arraySubtract(previouslyMatchingElements, matchingElements);\n\n        this.matchingElements = matchingElements;   \n        \n        if(addedElements.length > 0 || removedElements.length > 0) {\n            let event = new MatchingElementsChangedEvent(this, addedElements, removedElements);\n\n            this.executor(event, this.element);\n        }\n    }\n\n    private collectMatchingElements(): Element[] {\n        return ElementCollector.collectMatchingElements(this.element, this.matcher);\n    }\n}\n\nexport class MatchingElementsChangedEvent extends SubscriptionEvent {\n    readonly addedElements: Element[];\n    readonly removedElements: Element[];\n\n    constructor(matchingElementsSubscription: MatchingElementsSubscription, addedElements: Element[], removedElements: Element[]) {\n        super(matchingElementsSubscription, 'MatchingElementsChanged');\n\n        this.addedElements = addedElements;\n        this.removedElements = removedElements;\n    }\n}\n\nfunction arraySubtract<T>(minuend: T[], subtrahend: T[]): T[] {\n    let difference: T[] = [];\n\n    for(let member of minuend) {\n        if(subtrahend.indexOf(member) === -1) {\n            difference.push(member);\n        }\n    }\n\n    return difference;\n}","export abstract class Subscription {\n    readonly executor: SubscriptionExecutor;\n    readonly element: Element;\n    \n    constructor(element: Element, executor: SubscriptionExecutor) {\n        this.element = element;\n        this.executor = executor;\n    }\n\n    abstract connect() : void;\n    abstract disconnect() : void;\n}\n\nexport interface SubscriptionExecutor { \n    (event: Event | SubscriptionEvent, element: Element): void \n}\n\nexport class SubscriptionEvent {\n    readonly subscription: Subscription;\n    readonly name: string;\n\n    constructor(subscription: Subscription, name: string) {\n        this.subscription = subscription;\n        this.name = name;\n    }\n}\n","import { Subscription, SubscriptionExecutor, SubscriptionEvent } from './subscription';\n\nexport { SubscriptionExecutor };\n\nexport interface TrivialSubscriptionConfiguration {\n    connected?: boolean,\n    disconnected?: boolean\n}\n\nexport class ElementConnectionChangedEvent extends SubscriptionEvent {\n    readonly element: Element;\n    readonly isConnected: boolean;\n\n    constructor(trivialSubscription: TrivialSubscription, element: Element, isConnected: boolean) {\n        super(trivialSubscription, 'ElementConnected');\n\n        this.element = element;\n        this.isConnected = isConnected;\n    }\n}\n\nexport class TrivialSubscription extends Subscription {\n    private isConnected: boolean = false;\n    private config: TrivialSubscriptionConfiguration;\n\n    constructor(element: Element, config: TrivialSubscriptionConfiguration, executor: SubscriptionExecutor) {\n        super(element, executor);\n\n        this.config = config;\n    }\n\n    connect() {\n        if(!this.isConnected) {\n            this.isConnected = true;\n\n            if(this.config.connected) {\n                this.executor(this.buildElementConnectionChangedEvent(), this.element); \n            }\n        }\n    }\n\n    disconnect() {\n        if(this.isConnected) {\n            this.isConnected = false;\n\n            if(this.config.disconnected) {\n                this.executor(this.buildElementConnectionChangedEvent(), this.element);     \n            }\n        }\n    }\n    \n    private buildElementConnectionChangedEvent(): ElementConnectionChangedEvent {\n        return new ElementConnectionChangedEvent(this, this.element, this.isConnected);\n    }\n}"]}