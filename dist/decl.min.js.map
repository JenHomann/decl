{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/decl.ts","src/declarations/declaration.ts","src/declarations/match_declaration.ts","src/declarations/on_declaration.ts","src/declarations/scope_tracking_declaration.ts","src/declarations/select_declaration.ts","src/declarations/unmatch_declaration.ts","src/declarations/when_declaration.ts","src/node_collector.ts","src/scope.ts","src/subscriptions/document_mutation_subscription.ts","src/subscriptions/event_subscription.ts","src/subscriptions/matching_nodes_subscription.ts","src/subscriptions/node_matches_subscription.ts","src/subscriptions/subscription.ts","src/subscriptions/trivial_subscription.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","scope_1","Scope","Decl","root","this","scope","buildRootScope","select","matcher","executor","getDefaultInstance","on","getRootScope","inspect","includeSource","defaultInstance","window","document","setDefaultInstance","decl","pristine","activate","deactivate","prototype","console","groupCollapsed","groupEnd","default","Declaration","node","isActivated","subscription","connect","disconnect","declaration_1","trivial_subscription_1","MatchDeclaration","_super","_this","TrivialSubscription","connected","__extends","log","event_subscription_1","OnDeclaration","EventSubscription","ScopeTrackingDeclaration","apply","arguments","childScopes","removeAllChildScopes","getChildScopes","inspectChildScopes","_i","_a","addChildScope","push","removeChildScope","index","indexOf","splice","childScope","addChildScopeByNode","removeChildScopeByNode","getNode","scope_tracking_declaration_1","matching_nodes_subscription_1","SelectDeclaration","MatchingNodesSubscription","event","addedNodes","node_1","_b","_c","removedNodes","node_2","UnmatchDeclaration","disconnected","node_matches_subscription_1","WhenDeclaration","NodeMatchesSubscription","isMatching","isArrayLike","value","toArray","arrayLike","Array","slice","TypeError","isMemberOfArrayLike","haystack","needle","NodeCollector","isMatchingNode","rootNode","nodeMatcher","getInstance","collectMatchingNodes","instance","NODE_MATCHER_TYPE_ERROR_MESSAGE","cssSelector","isMatchingNodeFromCssSelector","object","isMatchingNodeFromObject","nodeVistor","isMatchingNodeFromNodeVistor","collectMatchingNodesFromCssSelector","collectMatchingNodesFromObject","collectMatchingNodesFromNodeVistor","Element","matches","ownerDocument","querySelectorAll","Node","visitorResult","Document","DocumentFragment","_node","nodes","childNodes","length_1","child","match_declaration_1","unmatch_declaration_1","on_declaration_1","select_declaration_1","when_declaration_1","executors","declarations","addExecutor","getDeclarations","removeAllDeclarations","match","addDeclaration","unmatch","when","eventMatcher","executorOrNodeMatcher","maybeExecutor","argumentsCount","onWithTwoArguments","onWithThreeArguments","declaration","removeDeclaration","subscription_1","Subscription","SubscriptionEvent","DocumentMutationSubscription","isListening","mutationObserver","MutationObserver","handleMutations","startListening","observe","mutationObserverInit","stopListening","childList","attributes","characterData","subtree","isConnected","eventNames","parseEventMatcher","eventListener","handleEvent","eventName","addEventListener","removeEventListener","split","arraySubtract","minuend","subtrahend","difference","minuend_1","member","document_mutation_subscription_1","node_collector_1","matchingNodes","updateMatchingNode","previouslyMatchingNodes","event_1","MatchingNodesChangedEvent","matchingNodesSubscription","updateIsMatchingNode","computeIsMatchingNode","wasMatchingNode","NodeMatchesChangedEvent","nodeMatchesSubscription","name","NodeConnectionChangedEvent","trivialSubscription","config","buildNodeConnectionChangedEvent"],"mappings":"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","file":"decl.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { Scope, NodeMatcher, EventMatcher, ScopeExecutor, SubscriptionExecutor } from './scope';\n\nexport { Scope, NodeMatcher, EventMatcher, ScopeExecutor, SubscriptionExecutor };\n\nexport class Decl {\n    private static defaultInstance: Decl | null = null;\n\n    static select(matcher: NodeMatcher, executor: ScopeExecutor): Scope {\n        return this.getDefaultInstance().select(matcher, executor);\n    }\n\n    static on(matcher: EventMatcher, executor: SubscriptionExecutor): Scope {\n        return this.getDefaultInstance().on(matcher, executor);\n    }\n\n    static getRootScope(): Scope {\n        return this.getDefaultInstance().getRootScope();\n    }\n\n    static inspect(includeSource?: boolean): void {\n        this.getDefaultInstance().inspect(includeSource);\n    }\n\n    static getDefaultInstance() : Decl {\n        return this.defaultInstance || (this.defaultInstance = new Decl(window.document));\n    }\n\n    static setDefaultInstance(decl: Decl) : Decl {\n        return this.defaultInstance = decl;\n    }\n\n    static pristine(): void {\n        if(this.defaultInstance) {\n            this.defaultInstance.pristine();\n            this.defaultInstance = null;\n        }\n    }\n\n    static activate(): void {\n        return this.getDefaultInstance().activate();\n    }\n\n    static deactivate(): void {\n        return this.getDefaultInstance().deactivate();        \n    }\n\n    private scope: Scope;\n\n    constructor(root: Node) {\n        this.scope = Scope.buildRootScope(root);\n    }\n\n    select(matcher: NodeMatcher, executor: ScopeExecutor): Scope {\n        return this.scope.select(matcher, executor);\n    }\n\n    on(matcher: EventMatcher, executor: SubscriptionExecutor): Scope {\n        return this.scope.on(matcher, executor);\n    }\n\n    getRootScope(): Scope {\n       return this.scope; \n    }\n\n    inspect(includeSource?: boolean): void {\n        console.groupCollapsed('<<root>>');\n        \n        try {\n            this.scope.inspect(includeSource);        \n        }finally{\n            console.groupEnd();\n        }\n    }\n\n    pristine(): void {\n        this.scope.pristine();\n    }\n\n    activate(): void {\n        this.scope.activate();        \n    }\n\n    deactivate(): void {        \n        this.scope.deactivate();\n    }\n}\n\n// Export to a global for the browser (there *has* to be a better way to do this!)\nif(typeof(window) !== 'undefined') {\n    (<any>window).Decl = Decl;\n}\n\nexport default Decl;\n","import { Subscription, SubscriptionExecutor } from '../subscriptions/subscription';\n\nexport { SubscriptionExecutor };\n\nexport abstract class Declaration {\n    protected isActivated: boolean = false;\n    protected readonly node: Node;\n    protected readonly subscription: Subscription;\n\n    constructor(node: Node) {\n        this.node = node;\n    }\n\n    activate(): void {\n        if(!this.isActivated) {\n            this.isActivated = true;\n\n            this.subscription.connect();\n        }\n    }\n\n    deactivate(): void {\n        if(this.isActivated) {\n            this.isActivated = false;\n\n            this.subscription.disconnect();\n        }        \n    }\n\n    abstract inspect(includeSource?: boolean): void;\n}","import { Declaration, SubscriptionExecutor } from './declaration';\nimport { TrivialSubscription } from '../subscriptions/trivial_subscription';\n\nexport { SubscriptionExecutor };\n\nexport class MatchDeclaration extends Declaration {\n    protected readonly subscription: TrivialSubscription;\n    protected readonly executor: SubscriptionExecutor;\n\n    constructor(node: Node, executor: SubscriptionExecutor) {\n        super(node);\n\n        this.executor = executor;\n\n        this.subscription = new TrivialSubscription(this.node, { connected: true }, this.executor);\n    }\n\n    inspect(): void {\n        console.groupCollapsed('matches');\n        console.log(this.executor);\n        console.groupEnd();\n    }\n}","import { Declaration, SubscriptionExecutor } from './declaration';\nimport { EventSubscription, EventMatcher } from '../subscriptions/event_subscription';\n\nexport { EventMatcher, SubscriptionExecutor };\n\nexport class OnDeclaration extends Declaration {\n    protected subscription: EventSubscription;\n    protected matcher: EventMatcher;\n    protected executor: SubscriptionExecutor;\n\n    constructor(node: Node, matcher: EventMatcher, executor: SubscriptionExecutor) {\n        super(node);\n\n        this.matcher = matcher;\n        this.executor = executor;\n\n        this.subscription = new EventSubscription(this.node, this.matcher, this.executor);    \n    }\n\n    inspect(): void {\n        console.groupCollapsed('on', this.matcher);\n\n        try {\n            console.log(this.executor);\n        }finally{\n            console.groupEnd();\n        }\n    }\n}","import { Declaration } from './declaration';\nimport { NodeMatcher } from '../node_collector';\nimport { Scope, ScopeExecutor } from '../scope';\n\nexport { NodeMatcher, ScopeExecutor };\n\nexport abstract class ScopeTrackingDeclaration extends Declaration {\n    private readonly childScopes: Scope[] = [];\n    \n    deactivate(): void {\n        this.removeAllChildScopes();\n        super.deactivate();\n    }\n\n    getChildScopes() {\n        return this.childScopes;\n    }\n\n    protected inspectChildScopes(includeSource?: boolean): void {        \n        for(let childScope of this.childScopes) {\n            childScope.inspect(includeSource);\n        }\n    }\n\n    protected addChildScope(scope: Scope) {\n        if(this.isActivated) {\n            this.childScopes.push(scope);\n\n            scope.activate();\n        }\n    }\n\n    protected removeChildScope(scope: Scope) { \n        scope.deactivate();\n\n        if(this.isActivated) {\n            let index = this.childScopes.indexOf(scope);\n            \n            if(index >= 0) {\n                this.childScopes.splice(index, 1);\n            }\n        }\n    }\n\n    protected removeAllChildScopes() {\n        let childScope: Scope;\n\n        while(childScope = this.childScopes[0]) {\n            this.removeChildScope(childScope);\n        }\n    }\n\n    protected addChildScopeByNode(node: Node, executor?: ScopeExecutor) {\n        let childScope = new Scope(node, executor);\n\n        this.addChildScope(childScope);\n    }\n\n    protected removeChildScopeByNode(node: Node) {\n        for(let childScope of this.childScopes) {\n            if(childScope.getNode() === node) {\n                this.removeChildScope(childScope);\n                return; // loop must exit to avoid data-race\n            }\n        }\n    }\n}","import { ScopeTrackingDeclaration, NodeMatcher, ScopeExecutor } from './scope_tracking_declaration';\nimport { MatchingNodesSubscription, MatchingNodesChangedEvent } from '../subscriptions/matching_nodes_subscription';\n\nexport { NodeMatcher, ScopeExecutor };\n\nexport class SelectDeclaration extends ScopeTrackingDeclaration {\n    protected subscription: MatchingNodesSubscription;\n    protected matcher: NodeMatcher;\n    protected executor: ScopeExecutor;\n\n    constructor(node: Node, matcher: NodeMatcher, executor: ScopeExecutor) {\n        super(node);\n\n        this.matcher = matcher;\n        this.executor = executor;\n\n        this.subscription = new MatchingNodesSubscription(this.node, this.matcher, (event: MatchingNodesChangedEvent) => {\n            for(let node of event.addedNodes) {\n                this.addChildScopeByNode(node, this.executor);\n            }\n\n            for(let node of event.removedNodes) {\n                this.removeChildScopeByNode(node);\n            }\n        });\n    }\n\n    inspect(includeSource?: boolean): void {\n        console.groupCollapsed('select', this.matcher);\n\n        try{\n            this.inspectChildScopes(includeSource);        \n        }finally{\n            console.groupEnd();\n        }\n    }\n}","import { Declaration } from './declaration';\nimport { TrivialSubscription, SubscriptionExecutor } from '../subscriptions/trivial_subscription';\n\nexport { SubscriptionExecutor };\n\nexport class UnmatchDeclaration extends Declaration {\n    protected subscription: TrivialSubscription;\n    protected executor: SubscriptionExecutor;\n\n    constructor(node: Node, executor: SubscriptionExecutor) {\n        super(node);\n\n        this.executor = executor;\n\n        this.subscription = new TrivialSubscription(this.node, { disconnected: true }, this.executor);\n    }\n\n    inspect(): void {\n        console.groupCollapsed('unmatches');\n        console.log(this.executor);\n        console.groupEnd();\n    }\n}","import { ScopeTrackingDeclaration, NodeMatcher, ScopeExecutor } from './scope_tracking_declaration';\nimport { NodeMatchesSubscription, NodeMatchesChangedEvent } from '../subscriptions/node_matches_subscription';\n\nexport { NodeMatcher, ScopeExecutor };\n\nexport class WhenDeclaration extends ScopeTrackingDeclaration {\n    protected subscription: NodeMatchesSubscription;\n    protected matcher: NodeMatcher;\n    protected executor: ScopeExecutor;\n\n    constructor(node: Node, matcher: NodeMatcher, executor: ScopeExecutor) {\n        super(node);\n\n        this.matcher = matcher;\n        this.executor = executor;\n\n        this.subscription = new NodeMatchesSubscription(this.node, this.matcher, (event: NodeMatchesChangedEvent) => {\n            if(event.isMatching) {\n                this.addChildScopeByNode(this.node, this.executor);\n            }else{\n                this.removeChildScopeByNode(this.node);\n            }\n        });\n    }\n\n    inspect(includeSource?: boolean): void {\n        console.groupCollapsed('when', this.matcher);\n\n        try{\n            this.inspectChildScopes(includeSource);        \n        }finally{\n            console.groupEnd();\n        }\n    }\n}","export interface NodeVisitor { (node: Node): NodeMatcher | boolean }\nexport declare type NodeMatcher = string | NodeListOf<Node> | Node[] | NodeVisitor;\n\nexport class NodeCollector {\n    private static instance: NodeCollector;\n    \n    private static readonly NODE_MATCHER_TYPE_ERROR_MESSAGE = \n        \"Decl: A `NodeMatcher` must be a CSS selector (string) or a function which takes \"  +\n        \"a node under consideration and returns a CSS selector (string) that matches all \"  + \n        \"matching nodes in the subtree, an array-like object of matching nodes in the \"     + \n        \"subtree, or a boolean value as to whether the node should be included (in this \"   +\n        \"case, the function will be invoked again for all children of the node).\";\n\n    static isMatchingNode(rootNode: Node, nodeMatcher: NodeMatcher): boolean {\n        return this.getInstance().isMatchingNode(rootNode, nodeMatcher);\n    }\n\n    static collectMatchingNodes(rootNode: Node, nodeMatcher: NodeMatcher): Node[] {\n        return this.getInstance().collectMatchingNodes(rootNode, nodeMatcher);\n    }\n\n    private static getInstance() : NodeCollector {\n        return this.instance || (this.instance = new NodeCollector());\n    }\n\n    isMatchingNode(node: Node, nodeMatcher: NodeMatcher): boolean {\n        switch(typeof(nodeMatcher)) {\n            default:\n                throw new TypeError(NodeCollector.NODE_MATCHER_TYPE_ERROR_MESSAGE);\n                \n            case 'string':\n                let cssSelector: string = <string>nodeMatcher;\n                return this.isMatchingNodeFromCssSelector(node, cssSelector);\n            \n            case 'object':\n                let object = <Object>nodeMatcher;\n                return this.isMatchingNodeFromObject(node, object);\n                \n            case 'function':\n                let nodeVistor = <NodeVisitor>nodeMatcher;\n                return this.isMatchingNodeFromNodeVistor(node, nodeVistor);       \n        }\n    }\n\n    collectMatchingNodes(node: Node, nodeMatcher: NodeMatcher): Node[] {\n        switch(typeof(nodeMatcher)) {\n            default:\n                throw new TypeError(NodeCollector.NODE_MATCHER_TYPE_ERROR_MESSAGE);\n                \n            case 'string':\n                let cssSelector: string = <string>nodeMatcher;\n                return this.collectMatchingNodesFromCssSelector(node, cssSelector);\n\n            case 'object':\n                let object = <Object>nodeMatcher;\n                return this.collectMatchingNodesFromObject(node, object);\n                \n            case 'function':\n                let nodeVistor = <NodeVisitor>nodeMatcher;\n                return this.collectMatchingNodesFromNodeVistor(node, nodeVistor);       \n        }\n    }\n\n    private isMatchingNodeFromCssSelector(node: Node, cssSelector: string): boolean {\n        if(node instanceof Element && typeof(node.matches) === 'function') {\n            return node.matches(cssSelector);\n        }else{\n            return isMemberOfArrayLike(node.ownerDocument.querySelectorAll(cssSelector), node);            \n        }\n    }\n\n    private isMatchingNodeFromObject(node: Node, object: Object): boolean {\n        if(object === null) {\n            return false;\n        }else{\n            if(isArrayLike(object)) {\n                let arrayLike = <ArrayLike<any>>object;\n\n                if(arrayLike.length === 0 || arrayLike[0] instanceof Node) {\n                    return isMemberOfArrayLike(arrayLike, node);                \n                }else{\n                    throw new TypeError(NodeCollector.NODE_MATCHER_TYPE_ERROR_MESSAGE);\n                }\n            }else{\n                throw new TypeError(NodeCollector.NODE_MATCHER_TYPE_ERROR_MESSAGE);\n            }\n        }\n    }\n\n    private isMatchingNodeFromNodeVistor(node: Node, nodeVistor: NodeVisitor): boolean {\n        let visitorResult = nodeVistor(node);\n\n        if(typeof(visitorResult) === 'boolean') {\n            let isMatch = <boolean>visitorResult;\n            return isMatch;\n        }else{\n            let nodeMatcher = <NodeMatcher>visitorResult;\n            return this.isMatchingNode(node, nodeMatcher);\n        }\n    }\n\n    private collectMatchingNodesFromCssSelector(node: Node, cssSelector: string): Node[] {\n        if(node instanceof Element || node instanceof Document || node instanceof DocumentFragment) {\n            return toArray<Node>(node.querySelectorAll(cssSelector));\n        }else{\n            return [];\n        }\n    }\n\n    private collectMatchingNodesFromObject(_node: Node, object: Object): Node[] {\n        if(object === null) {\n            return [];\n        }else{\n            if(isArrayLike(object)) {\n                let arrayLike = <ArrayLike<any>>object;\n\n                if(arrayLike.length === 0 || arrayLike[0] instanceof Node) {\n                    return toArray<Node>(arrayLike);                \n                }else{\n                    throw new TypeError(NodeCollector.NODE_MATCHER_TYPE_ERROR_MESSAGE);\n                }\n            }else{\n                throw new TypeError(NodeCollector.NODE_MATCHER_TYPE_ERROR_MESSAGE);\n            }\n        }\n    }\n\n    private collectMatchingNodesFromNodeVistor(node: Node, nodeVistor: NodeVisitor): Node[] {\n        let nodes: Node[] = [];\n        let childNodes = node.childNodes;\n        \n        for(let index = 0, length = childNodes.length; index < length; index++) {\n            let child = childNodes[index];\n            \n            if(child instanceof Node) {\n                let node: Node = child;\n                let visitorResult = nodeVistor(node);\n\n                if(typeof(visitorResult) === 'boolean') {\n                    let isMatch = <boolean>visitorResult;\n\n                    if(isMatch) {\n                        nodes.push(node);\n                    }\n                }else{\n                    nodes.push(...this.collectMatchingNodes(node, visitorResult));\n                }\n            }\n        }\n\n        return nodes;\n    }\n}\n\nexport default NodeCollector;\n\nfunction isArrayLike(value: any) {\n    return typeof(value) === 'object' && typeof(value.length) === 'number';\n}\n\nfunction toArray<T>(arrayLike: ArrayLike<T>): Array<T> {\n    if(isArrayLike(arrayLike)) {\n        return Array.prototype.slice.call(arrayLike, 0);\n    }else{\n        throw new TypeError('Expected ArrayLike');\n    }\n}\n\nfunction isMemberOfArrayLike(haystack: ArrayLike<any>,  needle: any) {\n    return Array.prototype.indexOf.call(haystack, needle) !== -1;\n}\n","import { Declaration, SubscriptionExecutor } from './declarations/declaration';\nimport { MatchDeclaration } from './declarations/match_declaration';\nimport { UnmatchDeclaration } from './declarations/unmatch_declaration';\nimport { OnDeclaration, EventMatcher } from './declarations/on_declaration';\n\nimport { NodeMatcher } from './declarations/scope_tracking_declaration';\nimport { SelectDeclaration } from './declarations/select_declaration';\nimport { WhenDeclaration } from './declarations/when_declaration';\n\nexport { Declaration, SubscriptionExecutor, NodeMatcher, EventMatcher };\n\nexport interface ScopeExecutor { \n    (scope: Scope, node: Node): void\n};\n\nexport class Scope {\n    static buildRootScope(node: Node): Scope {\n        let scope = new Scope(node);\n        scope.activate();\n\n        return scope;\n    }\n\n    private readonly node: Node;\n    private readonly executors: ScopeExecutor[] = [];\n\n    private isActivated: boolean = false;\n    private declarations: Declaration[] = [];\n\n    constructor(node: Node, executor?: ScopeExecutor) {\n        this.node = node;\n\n        if(executor) {\n            this.addExecutor(executor);\n        }\n    }\n\n    addExecutor(executor: ScopeExecutor): void {\n        this.executors.push(executor);\n\n        return executor.call(this, this, this.node);\n    }\n\n    getNode(): Node {\n        return this.node;\n    }\n\n    getDeclarations(): Declaration[] {\n        return this.declarations;\n    }\n\n    inspect(includeSource?: boolean): void {\n        console.groupCollapsed('<<', this.node, '>>');\n\n        try {\n            if(includeSource) {\n                console.groupCollapsed('source');\n            \n                for(let executor of this.executors) {\n                    console.log(executor);\n                }\n\n                console.groupEnd();\n            }\n            \n            for(let declaration of this.declarations) {\n                declaration.inspect(includeSource);\n            }\n        }finally{\n            (<any>console.groupEnd)();\n        }\n    }\n\n    activate(): void {\n        if(!this.isActivated) {\n            this.isActivated = true;\n\n            for(let declaration of this.declarations) {\n                declaration.activate();\n            }\n        }\n    }\n\n    deactivate(): void {        \n        if(this.isActivated) {\n            this.isActivated = false;            \n            \n            for(let declaration of this.declarations) {\n                declaration.deactivate();\n            }\n        }\n    }\n\n    pristine(): void {\n        this.deactivate();\n        this.removeAllDeclarations();\n    }\n\n    match(executor: SubscriptionExecutor): Scope {\n        this.addDeclaration(new MatchDeclaration(this.node, executor));\n\n        return this;\n    }\n\n    unmatch(executor: SubscriptionExecutor): Scope {\n        this.addDeclaration(new UnmatchDeclaration(this.node, executor));\n\n        return this;\n    }\n\n    select(matcher: NodeMatcher, executor: ScopeExecutor): Scope {\n        this.addDeclaration(new SelectDeclaration(this.node, matcher, executor));\n\n        return this;\n    }\n\n    when(matcher: NodeMatcher, executor: ScopeExecutor): Scope {\n\t\tthis.addDeclaration(new WhenDeclaration(this.node, matcher, executor));\n\n        return this;\n    }\n\n    on(eventMatcher: EventMatcher, executor: SubscriptionExecutor): Scope;\n    on(eventMatcher: EventMatcher, nodeMatcher: NodeMatcher, executor: SubscriptionExecutor): Scope;\n    on(eventMatcher: EventMatcher, executorOrNodeMatcher: SubscriptionExecutor | NodeMatcher, maybeExecutor?: SubscriptionExecutor): Scope {\n        let argumentsCount = arguments.length;\n\n        switch(argumentsCount) {\n            case 2:\n                return this.onWithTwoArguments(eventMatcher, <SubscriptionExecutor>executorOrNodeMatcher);\n            case 3:\n                return this.onWithThreeArguments(eventMatcher, <NodeMatcher>executorOrNodeMatcher, <SubscriptionExecutor>maybeExecutor);\n            default:\n                throw new TypeError(\"Failed to execute 'on' on 'Scope': 2 or 3 arguments required, but \" + argumentsCount + \" present.\");\n        }\n    }\n\n    private onWithTwoArguments(eventMatcher: EventMatcher, executor: SubscriptionExecutor): Scope {\n        this.addDeclaration(new OnDeclaration(this.node, eventMatcher, executor));\n\n        return this;\n    }\n\n    private onWithThreeArguments(eventMatcher: EventMatcher, nodeMatcher: NodeMatcher, executor: SubscriptionExecutor): Scope {\n        this.select(nodeMatcher, (scope) => {\n            scope.on(eventMatcher, executor);\n        });\n\n        return this;\n    }\n\n    private addDeclaration(declaration: Declaration): void {\n        this.declarations.push(declaration);\n\n        if(this.isActivated) {\n            declaration.activate();\n        }\n    }\n\n    private removeDeclaration(declaration: Declaration): void {  \n        let index = this.declarations.indexOf(declaration);\n\n        if(index >= 0) {\n            this.declarations.splice(index, 1);\n        }\n\n        declaration.deactivate();        \n    }\n\n    private removeAllDeclarations() {        \n        let declaration: Declaration;\n\n        while(declaration = this.declarations[0]) {\n            this.removeDeclaration(declaration);\n        }\n    }\n}\n","import { Subscription, SubscriptionExecutor, SubscriptionEvent } from './subscription';\n\nexport abstract class DocumentMutationSubscription extends Subscription {\n    static readonly mutationObserverInit: MutationObserverInit = {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true\n    };\n\n    private isListening : boolean = false;\n    private readonly mutationObserver: MutationObserver;\n\n    constructor(node: Node, executor: SubscriptionExecutor) {\n        super(node, executor);\n\n        this.mutationObserver = new MutationObserver((): void => {\n            this.handleMutations();\n        });\n    }\n\n    protected startListening(): void {\n        if(!this.isListening) {\n            this.mutationObserver.observe(this.node, DocumentMutationSubscription.mutationObserverInit);\n            this.isListening = true;\n        }\n    }\n\n    protected stopListening(): void {\n        if(this.isListening) {\n            this.mutationObserver.disconnect();\n            this.isListening = false;\n        }\n    }\n    \n    protected abstract handleMutations(): void;\n}\n\nexport { Subscription, SubscriptionExecutor, SubscriptionEvent };","import { Subscription, SubscriptionExecutor } from './subscription';\n\nexport { SubscriptionExecutor };\n\nexport class EventSubscription extends Subscription {\n    readonly eventMatcher: EventMatcher;\n    readonly eventNames: string[];\n\n    private isConnected : boolean = false;    \n    private readonly eventListener: EventListener;\n\n    constructor(node: Node, eventMatcher: EventMatcher, executor: SubscriptionExecutor) {\n        super(node, executor);\n\n        this.eventMatcher = eventMatcher;\n        this.eventNames = this.parseEventMatcher(this.eventMatcher);\n\n        this.eventListener = (event: Event): void => {\n            this.handleEvent(event);\n        }\n    }\n\n    connect(): void {\n        if(!this.isConnected) {\n            this.isConnected = true;\n\n            for(let eventName of this.eventNames) {\n                this.node.addEventListener(eventName, this.eventListener, false);\n            }\n        }\n    }\n\n    disconnect(): void {\n        if(this.isConnected) {\n            for(let eventName of this.eventNames) {\n                this.node.removeEventListener(eventName, this.eventListener, false);\n            }            \n\n            this.isConnected = false;\n        }\n    }\n\n    private handleEvent(event: Event): void {\n        this.executor(event, this.node);         \n    }\n\n    private parseEventMatcher(eventMatcher: EventMatcher): string[] {\n        // TODO: Support all of the jQuery style event options\n        return eventMatcher.split(' ');\n    } \n}\n\nexport declare type EventMatcher = string;\n","import { DocumentMutationSubscription, SubscriptionExecutor, SubscriptionEvent } from './document_mutation_subscription';\nimport { NodeMatcher, NodeCollector } from '../node_collector';\n\nexport { NodeMatcher };\n\nexport class MatchingNodesSubscription extends DocumentMutationSubscription {\n    readonly matcher: NodeMatcher;\n\n    private isConnected: boolean = false;\n    private matchingNodes: Node[] = [];\n\n    constructor(node: Node, matcher: NodeMatcher, executor: SubscriptionExecutor) {\n        super(node, executor);\n\n        this.matcher = matcher;\n    }\n\n    connect(): void {\n        if(!this.isConnected) {\n            this.updateMatchingNode(this.collectMatchingNodes());\n            this.startListening();\n\n            this.isConnected = true;\n        }\n    }\n\n    disconnect(): void {\n        if(this.isConnected) {\n            this.stopListening();\n            this.updateMatchingNode([]);\n\n            this.isConnected = false;\n        }        \n    }\n\n    protected handleMutations(): void {\n        this.updateMatchingNode(this.collectMatchingNodes());\n    }\n\n    private updateMatchingNode(matchingNodes: Node[]): void {\n        let previouslyMatchingNodes = this.matchingNodes;\n\n        let addedNodes = arraySubtract(matchingNodes, previouslyMatchingNodes);\n        let removedNodes = arraySubtract(previouslyMatchingNodes, matchingNodes);\n\n        this.matchingNodes = matchingNodes;   \n        \n        if(addedNodes.length > 0 || removedNodes.length > 0) {\n            let event = new MatchingNodesChangedEvent(this, addedNodes, removedNodes);\n\n            this.executor(event, this.node);\n        }\n    }\n\n    private collectMatchingNodes(): Node[] {\n        return NodeCollector.collectMatchingNodes(this.node, this.matcher);\n    }\n}\n\nexport class MatchingNodesChangedEvent extends SubscriptionEvent {\n    readonly addedNodes: Node[];\n    readonly removedNodes: Node[];\n\n    constructor(matchingNodesSubscription: MatchingNodesSubscription, addedNodes: Node[], removedNodes: Node[]) {\n        super(matchingNodesSubscription, 'MatchingNodesChanged');\n\n        this.addedNodes = addedNodes;\n        this.removedNodes = removedNodes;\n    }\n}\n\nfunction arraySubtract<T>(minuend: T[], subtrahend: T[]): T[] {\n    let difference: T[] = [];\n\n    for(let member of minuend) {\n        if(subtrahend.indexOf(member) === -1) {\n            difference.push(member);\n        }\n    }\n\n    return difference;\n}","import { DocumentMutationSubscription, SubscriptionExecutor, SubscriptionEvent } from './document_mutation_subscription';\nimport { NodeMatcher, NodeCollector } from '../node_collector';\n\nexport class NodeMatchesSubscription extends DocumentMutationSubscription {\n    readonly matcher: NodeMatcher;\n\n    private isConnected: boolean = false;\n    private isMatchingNode: boolean = false;\n\n    constructor(node: Node, matcher: NodeMatcher, executor: SubscriptionExecutor) {\n        super(node, executor);\n\n        this.matcher = matcher;\n    }\n\n    connect(): void {\n        if(!this.isConnected) {\n            this.updateIsMatchingNode(this.computeIsMatchingNode());\n            this.startListening();\n\n            this.isConnected = true;\n        }\n    }\n\n    disconnect(): void {\n        if(this.isConnected) {\n            this.stopListening();\n            this.updateIsMatchingNode(false);\n\n            this.isConnected = false;\n        }        \n    }\n\n    protected handleMutations(): void {\n        this.updateIsMatchingNode(this.computeIsMatchingNode());\n    }\n\n    private updateIsMatchingNode(isMatchingNode: boolean): void {\n        let wasMatchingNode = this.isMatchingNode;\n        this.isMatchingNode = isMatchingNode;\n\n        if(wasMatchingNode !== isMatchingNode) {\n            let event = new NodeMatchesChangedEvent(this, isMatchingNode);\n\n            this.executor(event, this.node);\n        }\n    }\n\n    private computeIsMatchingNode(): boolean {\n        return NodeCollector.isMatchingNode(this.node, this.matcher);\n    }\n}\n\nexport class NodeMatchesChangedEvent extends SubscriptionEvent {\n    readonly isMatching: boolean;\n\n    constructor(nodeMatchesSubscription: NodeMatchesSubscription, isMatching: boolean) {\n        super(nodeMatchesSubscription, 'NodeMatchesChangedEvent');\n\n        this.isMatching = isMatching;\n    }\n}\n\nexport { NodeMatcher };\n","export abstract class Subscription {\n    readonly executor: SubscriptionExecutor;\n    readonly node: Node;\n    \n    constructor(node: Node, executor: SubscriptionExecutor) {\n        this.node = node;\n        this.executor = executor;\n    }\n\n    abstract connect() : void;\n    abstract disconnect() : void;\n}\n\nexport interface SubscriptionExecutor { \n    (event: Event | SubscriptionEvent, node: Node): void \n}\n\nexport class SubscriptionEvent {\n    readonly subscription: Subscription;\n    readonly name: string;\n\n    constructor(subscription: Subscription, name: string) {\n        this.subscription = subscription;\n        this.name = name;\n    }\n}\n","import { Subscription, SubscriptionExecutor, SubscriptionEvent } from './subscription';\n\nexport { SubscriptionExecutor };\n\nexport interface TrivialSubscriptionConfiguration {\n    connected?: boolean,\n    disconnected?: boolean\n}\n\nexport class NodeConnectionChangedEvent extends SubscriptionEvent {\n    readonly node: Node;\n    readonly isConnected: boolean;\n\n    constructor(trivialSubscription: TrivialSubscription, node: Node, isConnected: boolean) {\n        super(trivialSubscription, 'NodeConnected');\n\n        this.node = node;\n        this.isConnected = isConnected;\n    }\n}\n\nexport class TrivialSubscription extends Subscription {\n    private isConnected: boolean = false;\n    private config: TrivialSubscriptionConfiguration;\n\n    constructor(node: Node, config: TrivialSubscriptionConfiguration, executor: SubscriptionExecutor) {\n        super(node, executor);\n\n        this.config = config;\n    }\n\n    connect() {\n        if(!this.isConnected) {\n            this.isConnected = true;\n\n            if(this.config.connected) {\n                this.executor(this.buildNodeConnectionChangedEvent(), this.node); \n            }\n        }\n    }\n\n    disconnect() {\n        if(this.isConnected) {\n            this.isConnected = false;\n\n            if(this.config.disconnected) {\n                this.executor(this.buildNodeConnectionChangedEvent(), this.node);     \n            }\n        }\n    }\n    \n    private buildNodeConnectionChangedEvent(): NodeConnectionChangedEvent {\n        return new NodeConnectionChangedEvent(this, this.node, this.isConnected);\n    }\n}"]}